{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/blog-img/18-10-7/1.png","path":"images/blog-img/18-10-7/1.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"dbc93933f6ab21c45dc80f80f065ca1da76c044d","modified":1543324480835},{"_id":"source/404.html","hash":"050442d7267c89daef3dae09a4809c179f26c7f8","modified":1538839489819},{"_id":"source/favicon.ico","hash":"e2a9e90adda6b803a273bfadaf23b47c584fd5e1","modified":1546317120045},{"_id":"themes/next/.DS_Store","hash":"3b6d429fe4b05128105ad65587a05886ac36b979","modified":1538896832481},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1538809671714},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1538809671713},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1538809671712},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1538809671712},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1538809671714},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1538809671714},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1538809671714},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1538809671714},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1538809671715},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1538809671715},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1538809671715},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1538809671715},{"_id":"themes/next/_config.yml","hash":"666f38f20ec7fc1e9c9763c28f959d6275addc5c","modified":1546327743257},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1538809671716},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1538809671716},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1538809671738},{"_id":"source/_posts/JavaScript中的原型链.md","hash":"be9145bab43195835ce0cad73c059e76fc99af15","modified":1548901028725},{"_id":"source/_posts/JavaScript中this指向问题（含ES6）.md","hash":"d75b717ae512dc060c8004f0ab15e5b9e9eccda4","modified":1548902214899},{"_id":"source/_posts/Vue中使用px2rem把px转换为rem.md","hash":"c1dfb4c57aa3f84b0a3d0348474493c62f189cfa","modified":1546322093802},{"_id":"source/_posts/ES2015中class基本语法.md","hash":"1423425c8392dc41181bc140fc570065312b1aea","modified":1548762136227},{"_id":"source/_posts/Vue脚手架创建的时候卡在Download-https-chromedriver-storage.md","hash":"1ecc3e9bbec395d24c7a6b87f76cd9b4e4760ef8","modified":1546316960318},{"_id":"source/_posts/vscode下-vue文件初始化.md","hash":"a71aa57fc06d853e4fba15b28701fe0922dd8c3c","modified":1547877788551},{"_id":"source/_posts/Vue在安卓低版本兼容问题.md","hash":"7b5aafa5c71e412f8a46c5cd3b2e789c7f590a2a","modified":1546316962643},{"_id":"source/_posts/promise使用.md","hash":"088f40e5affcb803448a67cd929a27c052b45842","modified":1546403800195},{"_id":"source/_posts/Vue中使用scss和sass语法.md","hash":"830701d6771879de89b5acbd98d4b93ab6b3ad9d","modified":1546324721197},{"_id":"source/_posts/vscode格式化vue文件.md","hash":"edc16cb074ec3192c7495cb7788bedab6277fc5a","modified":1541232558759},{"_id":"source/categories/index.md","hash":"d9d0f15f5bea5ae76f31854cef328d97cc109d50","modified":1538814248999},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1538809671713},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1538809671713},{"_id":"source/tags/index.md","hash":"77aba225644b46360facf029b416dc16306913f6","modified":1538814249000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1538809671713},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1538809671713},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1538809671717},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1538809671716},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1538809671717},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1538809671717},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1538809671717},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1538809671717},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1538809671717},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1538809671718},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1538809671718},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1538809671718},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1538809671718},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1538809671719},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1538809671718},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1538809671719},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1538809671718},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1538809671719},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1538809671720},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1538809671736},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1538809671736},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1538809671736},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1538809671736},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1538809671738},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1538809671739},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1538809671737},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1538809671737},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1538809671737},{"_id":"themes/next/source/.DS_Store","hash":"585f14ea1881f3c7bf4f691e2a5f578c5fd3b14d","modified":1538844003069},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1538809671858},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1538809671857},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1538809671857},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538809671776},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1538809671720},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1538809671719},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1538809671720},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1538809671720},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1538809671720},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1538809671721},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1538809671721},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1538809671721},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1538809671722},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1538809671722},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1538809671723},{"_id":"themes/next/layout/_partials/footer.swig","hash":"1afe38cdbb10e663668f832961479d8742a19ab4","modified":1546318879771},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1538809671723},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1538809671723},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1538809671724},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1538809671726},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1538809671726},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1538809671727},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1538809671732},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1538809671733},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1538809671733},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1538809671733},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1538809671734},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1538809671733},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1538809671734},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1538809671739},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1538809671739},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1538809671740},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1538809671740},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1538809671740},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1538809671740},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1538809671741},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1538809671741},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1538809671741},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1538809671776},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1538809671777},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1538809671778},{"_id":"themes/next/source/images/.DS_Store","hash":"7a28debbb67f5fe35335c93e2ee021b859d8e23a","modified":1538844003068},{"_id":"themes/next/source/images/avatar.jpeg","hash":"320d1b629a62b863b59366442a3bb541331498a5","modified":1538810540908},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1538809671778},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1538809671779},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1538809671779},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1538809671779},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1538809671780},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1538809671780},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1538809671781},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1538809671781},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538809671782},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1538809671781},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1538809671782},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1538809671782},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1538809671783},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1538809671783},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1538809671783},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1538809671784},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538809671727},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538809671727},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538809671760},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538809671760},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538809671761},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1538809671775},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1546326340724},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1538809671723},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1538809671722},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1538809671724},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1538809671724},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1538809671725},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1538809671725},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1538809671725},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1538809671726},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1538809671726},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1538809671727},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1538809671727},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1538809671727},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1538809671730},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1538809671731},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1538809671731},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1538809671731},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1538809671731},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1538809671732},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1538809671732},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1538809671731},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1538809671732},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1538809671728},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1538809671728},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1538809671728},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1538809671728},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1538809671729},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1538809671729},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1538809671729},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1538809671729},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1538809671729},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1538809671729},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1538809671730},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1538809671730},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1538809671735},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1538809671730},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1538809671735},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1538809671736},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1538809671735},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1538809671760},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1538809671760},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1538809671761},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1538809671760},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1538809671774},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1538809671775},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1538809671775},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1538809671774},{"_id":"themes/next/source/images/blog-img/.DS_Store","hash":"86d18069f4321bf5f80ade4cdeb962db99d57ef8","modified":1538843483503},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1538809671784},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1538809671786},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1538809671785},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1538809671785},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1538809671786},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1538809671787},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1538809671788},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1538809671787},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1538809671789},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1538809671797},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1538809671788},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1538809671789},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1538809671803},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1538809671804},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1538809671804},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1538809671803},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1538809671814},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1538809671813},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1538809671814},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1538809671815},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1538809671818},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1538809671817},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1538809671819},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1538809671819},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1538809671818},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1538809671836},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1538809671838},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1538809671838},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1538809671838},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1538809671838},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1538809671839},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1538809671839},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1538809671841},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1538809671840},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1538809671840},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1538809671840},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1538809671841},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1538809671842},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1538809671842},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1538809671841},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1538809671842},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1538809671843},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1538809671842},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1538809671843},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1538809671844},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1538809671844},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1538809671844},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1538809671844},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1538809671846},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1538809671845},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1538809671846},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1538809671846},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1538809671853},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1538809671852},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1538809671857},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1538809671856},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1538809671856},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1538809671837},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1538809671734},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1538809671734},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1538809671742},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1538809671742},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1538809671742},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1538809671743},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1538809671743},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1538809671747},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1538809671758},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1538809671753},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1538809671758},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1538809671758},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1538809671759},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1538809671759},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1538809671759},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1538809671759},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1538809671763},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1538809671762},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1538809671762},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1538809671764},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1538809671763},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1538809671765},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1538809671765},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1538809671766},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1538809671767},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1538809671768},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1538809671768},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1538809671768},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1538809671769},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1538809671770},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1538809671771},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1538809671772},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"abd71d500bcc4056ec1c7999fb18b96ddf6fdbdb","modified":1546326692761},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1538809671773},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1538809671773},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1538809671788},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1538809671794},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1538809671796},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1538809671797},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1538809671805},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1538809671807},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1538809671805},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1538809671806},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1538809671808},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1538809671807},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1538809671813},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1538809671812},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1538809671811},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1538809671816},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1538809671816},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1538809671820},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1538809671820},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1538809671821},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1538809671852},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1538809671852},{"_id":"themes/next/source/images/blog-img/18-10-7/1.png","hash":"c7c6d1911284481041d69c562ef05a21b29797b0","modified":1538843218141},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1538809671795},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1538809671835},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1538809671836},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1538809671855},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1538809671743},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1538809671743},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1538809671744},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1538809671744},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1538809671745},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1538809671744},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1538809671745},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1538809671745},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1538809671746},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1538809671746},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1538809671745},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1538809671746},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1538809671747},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1538809671748},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1538809671747},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1538809671747},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1538809671748},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1538809671748},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1538809671748},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1538809671748},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1538809671748},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1538809671749},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1538809671749},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1538809671750},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1538809671749},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1538809671750},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1538809671751},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1538809671750},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1538809671750},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1538809671751},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1538809671751},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1538809671751},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1538809671751},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1538809671751},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1538809671752},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1538809671752},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1538809671752},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1538809671752},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1538809671752},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1538809671753},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1538809671753},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1538809671754},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1538809671753},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1538809671754},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1538809671754},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1538809671754},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1538809671754},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1538809671755},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1538809671755},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1538809671756},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1538809671755},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1538809671756},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1538809671756},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1538809671757},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1538809671756},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1538809671757},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1538809671757},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1538809671757},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1538809671766},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1538809671767},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1538809671769},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1538809671791},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1538809671791},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1538809671792},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1538809671793},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1538809671793},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1538809671809},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1538809671809},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1538809671810},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1538809671810},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1538809671811},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1538809671811},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1538809671834},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1538809671824},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1538809671827},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1538809671802},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1538809671851},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1538809671832}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n    </script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n    <meta name=\"robots\" content=\"all\" />\n    <meta name=\"robots\" content=\"index,follow\" />\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\"\n        homePageName=\"回到我的主页\">\n    </script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","date":"2018-10-07T07:15:04.380Z","updated":"2018-10-06T15:24:49.819Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjs5qlryb0000nizibo0icteu","content":"<!DOCTYPE HTML>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n    </script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n\n<head>\n    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n    <meta name=\"robots\" content=\"all\">\n    <meta name=\"robots\" content=\"index,follow\">\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n\n<body>\n    <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n    </script>\n    <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n    <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n\n</html>"},{"title":"分类","date":"2018-10-06T08:22:59.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-10-06 16:22:59\ntype: \"categories\"\n---\n","updated":"2018-10-06T08:24:08.999Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjs5qls0g0002nizillauaweu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-10-06T08:17:03.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-10-06 16:17:03\ntype: \"tags\"\n---\n","updated":"2018-10-06T08:24:09.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjs5qls5r000nnizitypfq4cu","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"JavaScript中的原型链","date":"2019-01-31T01:54:26.000Z","_content":"\n#### JavaScript 对象的创建方式\n\n在 JavaScript 中，创建对象的方式包括两种：\b  \n1、对象字面量  \n2、使用`new`表达式  \n对象字面量是一种灵活方便的书写方式，例如:\n\n```JavaScript\nvar point = {\n    p:'test',\n    alertP:function () {\n        alert(this.p);\n    }\n}\n```\n\n这样就用对象字面量创建了一个对象 p，它具有一个成员变量以及一个 \b 成员方法 \b`alertP`。这种写法不需要定义构造函数，因此不在本文讨论范围之内。这种写法的缺点是，每创建一个 \b 新的对象都需要写出完整的定义语句，不便于创建大量相同类型的 \b 对象，不利于继承等高级特性。\n\nnew 表达式是配合构造函数使用的，例如`new String('a string')`，调用内置的`String`函数构造一个字符串对象。下面我们用构造函数的方式来重新创建一个实现同样功能的对象，首先是定义构造函数，然后是用调用`new`表达式:\n\n```JavaScript\nfunction point () {\n    this.p = 'test';\n    this.alertP = function () {\n        alert(this.p);\n    }\n}\n\nvar point2 = new point();\n```\n\n那么，在使用`new`操作符来调用一个构造函数的时候，发生了什么了呢？其实很简单，就发生了四件事：\n\n```JavaScript\nvar obj = {};\nobj.__proto__ = point.prototype;\npoint.call(obj);\nreturn obj;\n```\n第一行，创建一个空的对象`obj`   \n第二行，将这个对象的`__proto__`成员指向了构造函数对象的`prototype`成员对象，这是最关键的异步，具体细节将在下文描述。    \n第三行，将构造函数的\b作用域赋给新对象，因此`point`函数中的`this`指向新对象`obj`，然后调用`point`。于是我们就给`0bj`对象赋值了一个成员变量`p`，这个成员变量的值就是`'test'`\n","source":"_posts/JavaScript中的原型链.md","raw":"---\ntitle: JavaScript中的原型链\ndate: 2019-01-31 09:54:26\ntags:\n---\n\n#### JavaScript 对象的创建方式\n\n在 JavaScript 中，创建对象的方式包括两种：\b  \n1、对象字面量  \n2、使用`new`表达式  \n对象字面量是一种灵活方便的书写方式，例如:\n\n```JavaScript\nvar point = {\n    p:'test',\n    alertP:function () {\n        alert(this.p);\n    }\n}\n```\n\n这样就用对象字面量创建了一个对象 p，它具有一个成员变量以及一个 \b 成员方法 \b`alertP`。这种写法不需要定义构造函数，因此不在本文讨论范围之内。这种写法的缺点是，每创建一个 \b 新的对象都需要写出完整的定义语句，不便于创建大量相同类型的 \b 对象，不利于继承等高级特性。\n\nnew 表达式是配合构造函数使用的，例如`new String('a string')`，调用内置的`String`函数构造一个字符串对象。下面我们用构造函数的方式来重新创建一个实现同样功能的对象，首先是定义构造函数，然后是用调用`new`表达式:\n\n```JavaScript\nfunction point () {\n    this.p = 'test';\n    this.alertP = function () {\n        alert(this.p);\n    }\n}\n\nvar point2 = new point();\n```\n\n那么，在使用`new`操作符来调用一个构造函数的时候，发生了什么了呢？其实很简单，就发生了四件事：\n\n```JavaScript\nvar obj = {};\nobj.__proto__ = point.prototype;\npoint.call(obj);\nreturn obj;\n```\n第一行，创建一个空的对象`obj`   \n第二行，将这个对象的`__proto__`成员指向了构造函数对象的`prototype`成员对象，这是最关键的异步，具体细节将在下文描述。    \n第三行，将构造函数的\b作用域赋给新对象，因此`point`函数中的`this`指向新对象`obj`，然后调用`point`。于是我们就给`0bj`对象赋值了一个成员变量`p`，这个成员变量的值就是`'test'`\n","slug":"JavaScript中的原型链","published":1,"updated":"2019-01-31T02:17:08.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs5qls0c0001nizitufzfybw","content":"<h4 id=\"JavaScript-对象的创建方式\"><a href=\"#JavaScript-对象的创建方式\" class=\"headerlink\" title=\"JavaScript 对象的创建方式\"></a>JavaScript 对象的创建方式</h4><p>在 JavaScript 中，创建对象的方式包括两种：\b<br>1、对象字面量<br>2、使用<code>new</code>表达式<br>对象字面量是一种灵活方便的书写方式，例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> point = &#123;</span><br><span class=\"line\">    p:<span class=\"string\">'test'</span>,</span><br><span class=\"line\">    alertP:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就用对象字面量创建了一个对象 p，它具有一个成员变量以及一个 \b 成员方法 \b<code>alertP</code>。这种写法不需要定义构造函数，因此不在本文讨论范围之内。这种写法的缺点是，每创建一个 \b 新的对象都需要写出完整的定义语句，不便于创建大量相同类型的 \b 对象，不利于继承等高级特性。</p>\n<p>new 表达式是配合构造函数使用的，例如<code>new String(&#39;a string&#39;)</code>，调用内置的<code>String</code>函数构造一个字符串对象。下面我们用构造函数的方式来重新创建一个实现同样功能的对象，首先是定义构造函数，然后是用调用<code>new</code>表达式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">point</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.p = <span class=\"string\">'test'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.alertP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> point2 = <span class=\"keyword\">new</span> point();</span><br></pre></td></tr></table></figure>\n<p>那么，在使用<code>new</code>操作符来调用一个构造函数的时候，发生了什么了呢？其实很简单，就发生了四件事：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.__proto__ = point.prototype;</span><br><span class=\"line\">point.call(obj);</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br></pre></td></tr></table></figure>\n<p>第一行，创建一个空的对象<code>obj</code><br>第二行，将这个对象的<code>__proto__</code>成员指向了构造函数对象的<code>prototype</code>成员对象，这是最关键的异步，具体细节将在下文描述。<br>第三行，将构造函数的\b作用域赋给新对象，因此<code>point</code>函数中的<code>this</code>指向新对象<code>obj</code>，然后调用<code>point</code>。于是我们就给<code>0bj</code>对象赋值了一个成员变量<code>p</code>，这个成员变量的值就是<code>&#39;test&#39;</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"JavaScript-对象的创建方式\"><a href=\"#JavaScript-对象的创建方式\" class=\"headerlink\" title=\"JavaScript 对象的创建方式\"></a>JavaScript 对象的创建方式</h4><p>在 JavaScript 中，创建对象的方式包括两种：\b<br>1、对象字面量<br>2、使用<code>new</code>表达式<br>对象字面量是一种灵活方便的书写方式，例如:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> point = &#123;</span><br><span class=\"line\">    p:<span class=\"string\">'test'</span>,</span><br><span class=\"line\">    alertP:<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样就用对象字面量创建了一个对象 p，它具有一个成员变量以及一个 \b 成员方法 \b<code>alertP</code>。这种写法不需要定义构造函数，因此不在本文讨论范围之内。这种写法的缺点是，每创建一个 \b 新的对象都需要写出完整的定义语句，不便于创建大量相同类型的 \b 对象，不利于继承等高级特性。</p>\n<p>new 表达式是配合构造函数使用的，例如<code>new String(&#39;a string&#39;)</code>，调用内置的<code>String</code>函数构造一个字符串对象。下面我们用构造函数的方式来重新创建一个实现同样功能的对象，首先是定义构造函数，然后是用调用<code>new</code>表达式:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">point</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.p = <span class=\"string\">'test'</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.alertP = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"keyword\">this</span>.p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> point2 = <span class=\"keyword\">new</span> point();</span><br></pre></td></tr></table></figure>\n<p>那么，在使用<code>new</code>操作符来调用一个构造函数的时候，发生了什么了呢？其实很简单，就发生了四件事：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">obj.__proto__ = point.prototype;</span><br><span class=\"line\">point.call(obj);</span><br><span class=\"line\"><span class=\"keyword\">return</span> obj;</span><br></pre></td></tr></table></figure>\n<p>第一行，创建一个空的对象<code>obj</code><br>第二行，将这个对象的<code>__proto__</code>成员指向了构造函数对象的<code>prototype</code>成员对象，这是最关键的异步，具体细节将在下文描述。<br>第三行，将构造函数的\b作用域赋给新对象，因此<code>point</code>函数中的<code>this</code>指向新对象<code>obj</code>，然后调用<code>point</code>。于是我们就给<code>0bj</code>对象赋值了一个成员变量<code>p</code>，这个成员变量的值就是<code>&#39;test&#39;</code></p>\n"},{"title":"JavaScript中this指向问题（含ES6）","date":"2019-01-31T02:36:54.000Z","_content":"","source":"_posts/JavaScript中this指向问题（含ES6）.md","raw":"---\ntitle: JavaScript中this指向问题（含ES6）\ndate: 2019-01-31 10:36:54\ntags:\n---\n","slug":"JavaScript中this指向问题（含ES6）","published":1,"updated":"2019-01-31T02:36:54.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs5qls0g0003nizi0zxzwtl9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Vue中使用px2rem把px转换为rem","date":"2019-01-01T05:27:07.000Z","_content":"\n## Vue中使用px2rem把px转换为rem\n使用Vue做移动端页面时，适配是必须的，rem不失为一种好的选择，可在不同屏幕上完美显示相同的布局\npx2rem插件可以使`<style></style>`中的px单位根据设计稿转换为rem\n\n### 1.安装\n> npm install px2rem-loader -S\n\n### 2.配置`px2rem-loader`\n在`build/utils.js`的15行`export.assetsPath = function(_pth){...}`里面添加：\n\n```JavaScript\n    export.cssLoaders = funtion(options){\n        option = option || {}\n        const cssLoader = {\n            loader:'css-loader',\n            options:{\n                sourceMap:options.sourceMap\n            }\n        }\n        //\b下面为添加的代码\n        const px2RemLoader = {\n            loader:'px2rem-loader',\n            options:{\n                remUnit:75 //设计稿宽度的10%\n            }\n        }\n        const postcssLoader = {\n            loader:'postcss=loader',\n            options:{\n                sourceMap:options.sourceMap\n            }\n        }\n    }\n```\n### 3.修改`function generateLoader(loader,loaderOptions){...}`    \n将`const loader = ...`后面的三元运算符问好后面的数组每一个都加上`px2remLoader`\n```JavaScript\n    function generateLoaders(loader, loaderOptions){\n        const loaders = option.usePostCss ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader]\n\n        if(loader) {\n            ....\n        }\n    }\n```\n### 4.使用\n```html\n    <style lang=\"\" scoped>\n        .wrap{\n            width:750px; /** 上面的remUnit：75的时候为10rem **/\n            height:1334px\n        }\n    </style>\n```\n### 5.注意事项\n安装px2rem后，再使用px上有些不同，大家可以参考px2rem官方介绍，下面简单介绍一下。  \n1，直接写px，编译后会直接转化成rem ---- 除开下面两种情况，其他长度用这个  \n\n2，在px后面添加`/*no*/`，不会转化px，会原样输出。 --- 一般border需用这个    \n\n3，在px后面添加`/*px*/`,会根据dpr的不同，生成三套代码。---- 一般字体需用这个\n\n","source":"_posts/Vue中使用px2rem把px转换为rem.md","raw":"---\ntitle: Vue中使用px2rem把px转换为rem\ndate: 2019-01-01 13:27:07\ntags:\n    -Vue\n---\n\n## Vue中使用px2rem把px转换为rem\n使用Vue做移动端页面时，适配是必须的，rem不失为一种好的选择，可在不同屏幕上完美显示相同的布局\npx2rem插件可以使`<style></style>`中的px单位根据设计稿转换为rem\n\n### 1.安装\n> npm install px2rem-loader -S\n\n### 2.配置`px2rem-loader`\n在`build/utils.js`的15行`export.assetsPath = function(_pth){...}`里面添加：\n\n```JavaScript\n    export.cssLoaders = funtion(options){\n        option = option || {}\n        const cssLoader = {\n            loader:'css-loader',\n            options:{\n                sourceMap:options.sourceMap\n            }\n        }\n        //\b下面为添加的代码\n        const px2RemLoader = {\n            loader:'px2rem-loader',\n            options:{\n                remUnit:75 //设计稿宽度的10%\n            }\n        }\n        const postcssLoader = {\n            loader:'postcss=loader',\n            options:{\n                sourceMap:options.sourceMap\n            }\n        }\n    }\n```\n### 3.修改`function generateLoader(loader,loaderOptions){...}`    \n将`const loader = ...`后面的三元运算符问好后面的数组每一个都加上`px2remLoader`\n```JavaScript\n    function generateLoaders(loader, loaderOptions){\n        const loaders = option.usePostCss ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader]\n\n        if(loader) {\n            ....\n        }\n    }\n```\n### 4.使用\n```html\n    <style lang=\"\" scoped>\n        .wrap{\n            width:750px; /** 上面的remUnit：75的时候为10rem **/\n            height:1334px\n        }\n    </style>\n```\n### 5.注意事项\n安装px2rem后，再使用px上有些不同，大家可以参考px2rem官方介绍，下面简单介绍一下。  \n1，直接写px，编译后会直接转化成rem ---- 除开下面两种情况，其他长度用这个  \n\n2，在px后面添加`/*no*/`，不会转化px，会原样输出。 --- 一般border需用这个    \n\n3，在px后面添加`/*px*/`,会根据dpr的不同，生成三套代码。---- 一般字体需用这个\n\n","slug":"Vue中使用px2rem把px转换为rem","published":1,"updated":"2019-01-01T05:54:53.802Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs5qls0i0004nizixjaedh7o","content":"<h2 id=\"Vue中使用px2rem把px转换为rem\"><a href=\"#Vue中使用px2rem把px转换为rem\" class=\"headerlink\" title=\"Vue中使用px2rem把px转换为rem\"></a>Vue中使用px2rem把px转换为rem</h2><p>使用Vue做移动端页面时，适配是必须的，rem不失为一种好的选择，可在不同屏幕上完美显示相同的布局<br>px2rem插件可以使<code>&lt;style&gt;&lt;/style&gt;</code>中的px单位根据设计稿转换为rem</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h3><blockquote>\n<p>npm install px2rem-loader -S</p>\n</blockquote>\n<h3 id=\"2-配置px2rem-loader\"><a href=\"#2-配置px2rem-loader\" class=\"headerlink\" title=\"2.配置px2rem-loader\"></a>2.配置<code>px2rem-loader</code></h3><p>在<code>build/utils.js</code>的15行<code>export.assetsPath = function(_pth){...}</code>里面添加：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span>.cssLoaders = funtion(options)&#123;</span><br><span class=\"line\">    option = option || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cssLoader = &#123;</span><br><span class=\"line\">        loader:<span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">        options:&#123;</span><br><span class=\"line\">            sourceMap:options.sourceMap</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//\b下面为添加的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> px2RemLoader = &#123;</span><br><span class=\"line\">        loader:<span class=\"string\">'px2rem-loader'</span>,</span><br><span class=\"line\">        options:&#123;</span><br><span class=\"line\">            remUnit:<span class=\"number\">75</span> <span class=\"comment\">//设计稿宽度的10%</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> postcssLoader = &#123;</span><br><span class=\"line\">        loader:<span class=\"string\">'postcss=loader'</span>,</span><br><span class=\"line\">        options:&#123;</span><br><span class=\"line\">            sourceMap:options.sourceMap</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改function-generateLoader-loader-loaderOptions\"><a href=\"#3-修改function-generateLoader-loader-loaderOptions\" class=\"headerlink\" title=\"3.修改function generateLoader(loader,loaderOptions){...}\"></a>3.修改<code>function generateLoader(loader,loaderOptions){...}</code></h3><p>将<code>const loader = ...</code>后面的三元运算符问好后面的数组每一个都加上<code>px2remLoader</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateLoaders</span>(<span class=\"params\">loader, loaderOptions</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> loaders = option.usePostCss ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(loader) &#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-使用\"><a href=\"#4-使用\" class=\"headerlink\" title=\"4.使用\"></a>4.使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    .wrap&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width:750px; /** 上面的remUnit：75的时候为10rem **/</span></span><br><span class=\"line\"><span class=\"undefined\">        height:1334px</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-注意事项\"><a href=\"#5-注意事项\" class=\"headerlink\" title=\"5.注意事项\"></a>5.注意事项</h3><p>安装px2rem后，再使用px上有些不同，大家可以参考px2rem官方介绍，下面简单介绍一下。<br>1，直接写px，编译后会直接转化成rem —- 除开下面两种情况，其他长度用这个  </p>\n<p>2，在px后面添加<code>/*no*/</code>，不会转化px，会原样输出。 — 一般border需用这个    </p>\n<p>3，在px后面添加<code>/*px*/</code>,会根据dpr的不同，生成三套代码。—- 一般字体需用这个</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue中使用px2rem把px转换为rem\"><a href=\"#Vue中使用px2rem把px转换为rem\" class=\"headerlink\" title=\"Vue中使用px2rem把px转换为rem\"></a>Vue中使用px2rem把px转换为rem</h2><p>使用Vue做移动端页面时，适配是必须的，rem不失为一种好的选择，可在不同屏幕上完美显示相同的布局<br>px2rem插件可以使<code>&lt;style&gt;&lt;/style&gt;</code>中的px单位根据设计稿转换为rem</p>\n<h3 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h3><blockquote>\n<p>npm install px2rem-loader -S</p>\n</blockquote>\n<h3 id=\"2-配置px2rem-loader\"><a href=\"#2-配置px2rem-loader\" class=\"headerlink\" title=\"2.配置px2rem-loader\"></a>2.配置<code>px2rem-loader</code></h3><p>在<code>build/utils.js</code>的15行<code>export.assetsPath = function(_pth){...}</code>里面添加：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span>.cssLoaders = funtion(options)&#123;</span><br><span class=\"line\">    option = option || &#123;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> cssLoader = &#123;</span><br><span class=\"line\">        loader:<span class=\"string\">'css-loader'</span>,</span><br><span class=\"line\">        options:&#123;</span><br><span class=\"line\">            sourceMap:options.sourceMap</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//\b下面为添加的代码</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> px2RemLoader = &#123;</span><br><span class=\"line\">        loader:<span class=\"string\">'px2rem-loader'</span>,</span><br><span class=\"line\">        options:&#123;</span><br><span class=\"line\">            remUnit:<span class=\"number\">75</span> <span class=\"comment\">//设计稿宽度的10%</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> postcssLoader = &#123;</span><br><span class=\"line\">        loader:<span class=\"string\">'postcss=loader'</span>,</span><br><span class=\"line\">        options:&#123;</span><br><span class=\"line\">            sourceMap:options.sourceMap</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-修改function-generateLoader-loader-loaderOptions\"><a href=\"#3-修改function-generateLoader-loader-loaderOptions\" class=\"headerlink\" title=\"3.修改function generateLoader(loader,loaderOptions){...}\"></a>3.修改<code>function generateLoader(loader,loaderOptions){...}</code></h3><p>将<code>const loader = ...</code>后面的三元运算符问好后面的数组每一个都加上<code>px2remLoader</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generateLoaders</span>(<span class=\"params\">loader, loaderOptions</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> loaders = option.usePostCss ? [cssLoader, postcssLoader, px2remLoader] : [cssLoader, px2remLoader]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(loader) &#123;</span><br><span class=\"line\">        ....</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"4-使用\"><a href=\"#4-使用\" class=\"headerlink\" title=\"4.使用\"></a>4.使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"\"</span> <span class=\"attr\">scoped</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"undefined\">    .wrap&#123;</span></span><br><span class=\"line\"><span class=\"undefined\">        width:750px; /** 上面的remUnit：75的时候为10rem **/</span></span><br><span class=\"line\"><span class=\"undefined\">        height:1334px</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;</span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-注意事项\"><a href=\"#5-注意事项\" class=\"headerlink\" title=\"5.注意事项\"></a>5.注意事项</h3><p>安装px2rem后，再使用px上有些不同，大家可以参考px2rem官方介绍，下面简单介绍一下。<br>1，直接写px，编译后会直接转化成rem —- 除开下面两种情况，其他长度用这个  </p>\n<p>2，在px后面添加<code>/*no*/</code>，不会转化px，会原样输出。 — 一般border需用这个    </p>\n<p>3，在px后面添加<code>/*px*/</code>,会根据dpr的不同，生成三套代码。—- 一般字体需用这个</p>\n"},{"title":"ES2015中class基本语法","date":"2019-01-29T09:29:17.000Z","_content":"\n### 类的由来\n\nJavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子\n\n```JavaScript\nfunction Point (x,y) {\n    this.x = x\n    this.y = y\n}\n\nPoint.prototype.toString = function () {\n    return '(' + this.x + ', ' + this.y + ')';\n}\n\nvar p = new Point(1,2)\n```\n\n上面这种写法跟传统的面向对象语言（比如 C++和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑  \nES6 提供了更接近 \b 传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过`class`关键词，可以定义类。  \n基本上，ES6`class`可以看做只是一个语法糖，他的绝大部分功能，ES5 都可以做到，新的`class`写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的`class`改写，就是下面这样。\n\n```JavaScript\nclass Point {\n    constructor (x,y) {\n        this.x = x\n        this.y = y\n    }\n    toString () {\n        return '(' + this.x + ',' + this.y + ')'\n    }\n}\n```\n\n\b 上面代码定义了一个”类“，可以看到里面有一个`constructor`方法，这就是构造方法，而`this`关键词则代表实例对象。也就是说，ES5 的构造函数`Point`，对应 ES6 的`Point`类的构造方法。  \n`Point`类除了构造方法，还定义了一个`toString`方法。注意，定义”类“的方法的时候，前面不需要加上`function`这个关键字，直接把桉树定义放进去就可以了。另外，方法之间也不需要都好分隔，加了会报错。  \nES6 的类，完全可以看做构造函数的另一种方法。\n\n```JavaScript\nclass Point {\n    // ...\n}\ntypeof Point // \"function\"\nPoint === Point.prototype.constructor  // true\n```\n\n上面的代码表明，类的数据类型就是函数，类本身就指向构造函数。  \n使用的时候，也是直接对类使用`new`命令，跟构造函数的用法完全一致.\n\n```JavaScript\nclass Bar {\n    doStuff () {\n        console.log('stuff);\n    }\n}\n\nvar b = new Bar();\nb.doStuff()  // \"stuff\"\n```\n\n构造函数的`prototype`属性，在 ES6 的”类“上面继续存在。事实上，类的 \b 所有方法都定义在类的`prototype`属性上面。\n\n```JavaScript\nclass Point {\n    constructor () {\n        // ...\n    }\n\n    toString () {\n        // ...\n    }\n\n    toValue () {\n        // ...\n    }\n}\n\n// 等同于\n\nPoint.prototype = {\n    constructor () {},\n    toString () {},\n    toValue () {},\n}\n```\n\n在类的实例上面调用方法，其实就是调用原型上的方法。\n\n```JavaScript\nclass B {}\nlet b = new B()\nb.constructor === B.prototype.constructor  // true\n```\n\n上面代码中，`b`是`B`类的实例，它的`constructor`方法就是`B`类原型的`constructor`方法。  \n由于类的方法都定义在`prototype`对象上面，所以累的新方法可以添加在`prototype`对象上面。`Object.assign`方法可以很方便地一次向类添加多个方法。\n\n```JavaScript\nclass Point {\n    construtor () {\n        // ..\n    }\n}\nObject.assign(Point,prototype,{\n    toString () {},\n    toValue () {}\n});\n```\n\n`prototype`对象的`construtor`属性，直接指向”类“的本身，这与 ES5 的行为是一致。\n\n```JavaScript\nPoint.prototype.constructor === Point //true\n```\n\n另外，类的内部所有定义的方法，都是不可枚举的(non-enumerable)。\n\n```JavaScript\nclass Point {\n    constructor (x,y) {\n        // ...\n    }\n    toString () {\n        // ...\n    }\n}\n\nObject.keys(Point.prototype)\n// []\nObject.getOwnPropertyNames(Point.prototype)\n// [\"constructor\",\"toString\"]\n```\n\n上面代码中，`toString`方法是`Point`类内部定义的方法，它是不可枚举。这一点与 ES5 的行为不一致。\n\n```JavaScript\nvar Point = function (x,y) {\n    // ...\n}\nPoint.prototype.toString = function () {\n    // ...\n}\n\nObject.keys(Point.prototype)\n// [\"toString\"]\nObject.getOwnPropertyNames(Point.prototype)\n// [\"constructor\",\"toString\"]\n```\n\n\b 上面采用 ES5 的写法，`toString`方法就是可枚举的。\n\n### constuctor 方法\n\n`constructor`方法是类的默认方法，通过`new`命令生成的对象实例时，自动调用该方法。一个类必须有`constructor`方法，如果没有显示定义，一个空的`constructor`方法会被默认添加。\n\n```JavaScript\nclass Point {\n\n}\n//等同于\nclass Point {\n    constructor () {\n\n    }\n}\n```\n\n上面代码中，定义一个空的类`Point`，JavaScript 引擎会自动为它添加一个空的`construtor`方法。  \n`constructor`方法默认返回实例对象（\b 即`this`），完全可以指定返回另外一个对象。\n\n```JavaScript\nclass Foo {\n    constructor () {\n        return Object.create(null);\n    }\n}\n\nnew Foo() instanceof Foo\n// false\n```\n\n上面的代码中，`constructor`函数返回一个全新的对象，结果导致实例对象不是`Foo`类的实例。  \n类必须使用`new`调用，否则会报错。\b 这是它跟普通构造函数的一个主要区别，后者不用`new`也可以执行。\n\n```JavaScript\nclass Foo {\n    constructor () {\n        return Object.create(null)\n    }\n}\n\nFoo()\n// TypeError:Class constructor Foo cannot be invoked widthout 'new'\n```\n\n### 类的实例\n\n生成类的实例的写法，与 ES5 完全一样，也是使用`new`命令。前面说过，如果忘记加上`new`，像函数那样调用`Class`，将会报错。\n\n```JavaScript\nclass Point {\n    // ...\n}\n//报错\nvar point = Point(2,3);\n\n// 正确\nvar point = new Point(2,3)\n```\n\n与 ES5 一样，实例的属性除非显示定义在其本身（即定义在`this`对象上），否则都是定义在原型上（即定义在`class`上）。\n\n```JavaScript\n// 定义类\nclass Point {\n    constructor (x,y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString () {\n        return '(' + this.x + ', ' + this.y + ')'\n    }\n}\nvar point = new Point(2,3)\npoint.toString() //(2,3)\npoint.hasOwnProperty('x') // true\npoint.hasOwnProperty('y') // true\npoint.hasOwnProperty('toString') // false\npoint.__proto__.hasOwnProperty('toString') //true\n```\n\n上面代码中,`x`和`y`都是实例对象`point`自身的属性（因为定义在`this`变量上），所以`hasOwnProperty`方法返回`true`，而`toString`是原型对象的属性（因为定义在`point`类是哪个），所以`hasOwnProperty`方法返回`false`。这些都与 ES5 的行为保持一致。  \n与 ES5 一样，类的所有实例都共享一个原型对象。\n\n```JavaScript\nvar p1 = new Point(2,3)\nvar p2 = new Point(3,2)\np1.__proto__ === p2.__proto__\n// true\n```\n","source":"_posts/ES2015中class基本语法.md","raw":"---\ntitle: ES2015中class基本语法\ndate: 2019-01-29 17:29:17\ntags:\n    -ES6\n---\n\n### 类的由来\n\nJavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子\n\n```JavaScript\nfunction Point (x,y) {\n    this.x = x\n    this.y = y\n}\n\nPoint.prototype.toString = function () {\n    return '(' + this.x + ', ' + this.y + ')';\n}\n\nvar p = new Point(1,2)\n```\n\n上面这种写法跟传统的面向对象语言（比如 C++和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑  \nES6 提供了更接近 \b 传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过`class`关键词，可以定义类。  \n基本上，ES6`class`可以看做只是一个语法糖，他的绝大部分功能，ES5 都可以做到，新的`class`写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的`class`改写，就是下面这样。\n\n```JavaScript\nclass Point {\n    constructor (x,y) {\n        this.x = x\n        this.y = y\n    }\n    toString () {\n        return '(' + this.x + ',' + this.y + ')'\n    }\n}\n```\n\n\b 上面代码定义了一个”类“，可以看到里面有一个`constructor`方法，这就是构造方法，而`this`关键词则代表实例对象。也就是说，ES5 的构造函数`Point`，对应 ES6 的`Point`类的构造方法。  \n`Point`类除了构造方法，还定义了一个`toString`方法。注意，定义”类“的方法的时候，前面不需要加上`function`这个关键字，直接把桉树定义放进去就可以了。另外，方法之间也不需要都好分隔，加了会报错。  \nES6 的类，完全可以看做构造函数的另一种方法。\n\n```JavaScript\nclass Point {\n    // ...\n}\ntypeof Point // \"function\"\nPoint === Point.prototype.constructor  // true\n```\n\n上面的代码表明，类的数据类型就是函数，类本身就指向构造函数。  \n使用的时候，也是直接对类使用`new`命令，跟构造函数的用法完全一致.\n\n```JavaScript\nclass Bar {\n    doStuff () {\n        console.log('stuff);\n    }\n}\n\nvar b = new Bar();\nb.doStuff()  // \"stuff\"\n```\n\n构造函数的`prototype`属性，在 ES6 的”类“上面继续存在。事实上，类的 \b 所有方法都定义在类的`prototype`属性上面。\n\n```JavaScript\nclass Point {\n    constructor () {\n        // ...\n    }\n\n    toString () {\n        // ...\n    }\n\n    toValue () {\n        // ...\n    }\n}\n\n// 等同于\n\nPoint.prototype = {\n    constructor () {},\n    toString () {},\n    toValue () {},\n}\n```\n\n在类的实例上面调用方法，其实就是调用原型上的方法。\n\n```JavaScript\nclass B {}\nlet b = new B()\nb.constructor === B.prototype.constructor  // true\n```\n\n上面代码中，`b`是`B`类的实例，它的`constructor`方法就是`B`类原型的`constructor`方法。  \n由于类的方法都定义在`prototype`对象上面，所以累的新方法可以添加在`prototype`对象上面。`Object.assign`方法可以很方便地一次向类添加多个方法。\n\n```JavaScript\nclass Point {\n    construtor () {\n        // ..\n    }\n}\nObject.assign(Point,prototype,{\n    toString () {},\n    toValue () {}\n});\n```\n\n`prototype`对象的`construtor`属性，直接指向”类“的本身，这与 ES5 的行为是一致。\n\n```JavaScript\nPoint.prototype.constructor === Point //true\n```\n\n另外，类的内部所有定义的方法，都是不可枚举的(non-enumerable)。\n\n```JavaScript\nclass Point {\n    constructor (x,y) {\n        // ...\n    }\n    toString () {\n        // ...\n    }\n}\n\nObject.keys(Point.prototype)\n// []\nObject.getOwnPropertyNames(Point.prototype)\n// [\"constructor\",\"toString\"]\n```\n\n上面代码中，`toString`方法是`Point`类内部定义的方法，它是不可枚举。这一点与 ES5 的行为不一致。\n\n```JavaScript\nvar Point = function (x,y) {\n    // ...\n}\nPoint.prototype.toString = function () {\n    // ...\n}\n\nObject.keys(Point.prototype)\n// [\"toString\"]\nObject.getOwnPropertyNames(Point.prototype)\n// [\"constructor\",\"toString\"]\n```\n\n\b 上面采用 ES5 的写法，`toString`方法就是可枚举的。\n\n### constuctor 方法\n\n`constructor`方法是类的默认方法，通过`new`命令生成的对象实例时，自动调用该方法。一个类必须有`constructor`方法，如果没有显示定义，一个空的`constructor`方法会被默认添加。\n\n```JavaScript\nclass Point {\n\n}\n//等同于\nclass Point {\n    constructor () {\n\n    }\n}\n```\n\n上面代码中，定义一个空的类`Point`，JavaScript 引擎会自动为它添加一个空的`construtor`方法。  \n`constructor`方法默认返回实例对象（\b 即`this`），完全可以指定返回另外一个对象。\n\n```JavaScript\nclass Foo {\n    constructor () {\n        return Object.create(null);\n    }\n}\n\nnew Foo() instanceof Foo\n// false\n```\n\n上面的代码中，`constructor`函数返回一个全新的对象，结果导致实例对象不是`Foo`类的实例。  \n类必须使用`new`调用，否则会报错。\b 这是它跟普通构造函数的一个主要区别，后者不用`new`也可以执行。\n\n```JavaScript\nclass Foo {\n    constructor () {\n        return Object.create(null)\n    }\n}\n\nFoo()\n// TypeError:Class constructor Foo cannot be invoked widthout 'new'\n```\n\n### 类的实例\n\n生成类的实例的写法，与 ES5 完全一样，也是使用`new`命令。前面说过，如果忘记加上`new`，像函数那样调用`Class`，将会报错。\n\n```JavaScript\nclass Point {\n    // ...\n}\n//报错\nvar point = Point(2,3);\n\n// 正确\nvar point = new Point(2,3)\n```\n\n与 ES5 一样，实例的属性除非显示定义在其本身（即定义在`this`对象上），否则都是定义在原型上（即定义在`class`上）。\n\n```JavaScript\n// 定义类\nclass Point {\n    constructor (x,y) {\n        this.x = x\n        this.y = y\n    }\n\n    toString () {\n        return '(' + this.x + ', ' + this.y + ')'\n    }\n}\nvar point = new Point(2,3)\npoint.toString() //(2,3)\npoint.hasOwnProperty('x') // true\npoint.hasOwnProperty('y') // true\npoint.hasOwnProperty('toString') // false\npoint.__proto__.hasOwnProperty('toString') //true\n```\n\n上面代码中,`x`和`y`都是实例对象`point`自身的属性（因为定义在`this`变量上），所以`hasOwnProperty`方法返回`true`，而`toString`是原型对象的属性（因为定义在`point`类是哪个），所以`hasOwnProperty`方法返回`false`。这些都与 ES5 的行为保持一致。  \n与 ES5 一样，类的所有实例都共享一个原型对象。\n\n```JavaScript\nvar p1 = new Point(2,3)\nvar p2 = new Point(3,2)\np1.__proto__ === p2.__proto__\n// true\n```\n","slug":"ES2015中class基本语法","published":1,"updated":"2019-01-29T11:42:16.227Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs5qls0k0005nizi5a5xi6pg","content":"<h3 id=\"类的由来\"><a href=\"#类的由来\" class=\"headerlink\" title=\"类的由来\"></a>类的由来</h3><p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span> (<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>上面这种写法跟传统的面向对象语言（比如 C++和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑<br>ES6 提供了更接近 \b 传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过<code>class</code>关键词，可以定义类。<br>基本上，ES6<code>class</code>可以看做只是一个语法糖，他的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的<code>class</code>改写，就是下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (x,y) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">','</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b 上面代码定义了一个”类“，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而<code>this</code>关键词则代表实例对象。也就是说，ES5 的构造函数<code>Point</code>，对应 ES6 的<code>Point</code>类的构造方法。<br><code>Point</code>类除了构造方法，还定义了一个<code>toString</code>方法。注意，定义”类“的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把桉树定义放进去就可以了。另外，方法之间也不需要都好分隔，加了会报错。<br>ES6 的类，完全可以看做构造函数的另一种方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> Point <span class=\"comment\">// \"function\"</span></span><br><span class=\"line\">Point === Point.prototype.constructor  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码表明，类的数据类型就是函数，类本身就指向构造函数。<br>使用的时候，也是直接对类使用<code>new</code>命令，跟构造函数的用法完全一致.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> </span>&#123;</span><br><span class=\"line\">    doStuff () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'stuff);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">var b = new Bar();</span></span><br><span class=\"line\"><span class=\"string\">b.doStuff()  // \"stuff\"</span></span><br></pre></td></tr></table></figure>\n<p>构造函数的<code>prototype</code>属性，在 ES6 的”类“上面继续存在。事实上，类的 \b 所有方法都定义在类的<code>prototype</code>属性上面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toValue () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\">Point.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;&#125;,</span><br><span class=\"line\">    toString () &#123;&#125;,</span><br><span class=\"line\">    toValue () &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在类的实例上面调用方法，其实就是调用原型上的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B()</span><br><span class=\"line\">b.constructor === B.prototype.constructor  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>b</code>是<code>B</code>类的实例，它的<code>constructor</code>方法就是<code>B</code>类原型的<code>constructor</code>方法。<br>由于类的方法都定义在<code>prototype</code>对象上面，所以累的新方法可以添加在<code>prototype</code>对象上面。<code>Object.assign</code>方法可以很方便地一次向类添加多个方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    construtor () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Point,prototype,&#123;</span><br><span class=\"line\">    toString () &#123;&#125;,</span><br><span class=\"line\">    toValue () &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>prototype</code>对象的<code>construtor</code>属性，直接指向”类“的本身，这与 ES5 的行为是一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Point.prototype.constructor === Point <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>另外，类的内部所有定义的方法，都是不可枚举的(non-enumerable)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (x,y) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(Point.prototype)</span><br><span class=\"line\"><span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(Point.prototype)</span><br><span class=\"line\"><span class=\"comment\">// [\"constructor\",\"toString\"]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>toString</code>方法是<code>Point</code>类内部定义的方法，它是不可枚举。这一点与 ES5 的行为不一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Point = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(Point.prototype)</span><br><span class=\"line\"><span class=\"comment\">// [\"toString\"]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(Point.prototype)</span><br><span class=\"line\"><span class=\"comment\">// [\"constructor\",\"toString\"]</span></span><br></pre></td></tr></table></figure>\n<p>\b 上面采用 ES5 的写法，<code>toString</code>方法就是可枚举的。</p>\n<h3 id=\"constuctor-方法\"><a href=\"#constuctor-方法\" class=\"headerlink\" title=\"constuctor 方法\"></a>constuctor 方法</h3><p><code>constructor</code>方法是类的默认方法，通过<code>new</code>命令生成的对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显示定义，一个空的<code>constructor</code>方法会被默认添加。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，定义一个空的类<code>Point</code>，JavaScript 引擎会自动为它添加一个空的<code>construtor</code>方法。<br><code>constructor</code>方法默认返回实例对象（\b 即<code>this</code>），完全可以指定返回另外一个对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo() <span class=\"keyword\">instanceof</span> Foo</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，<code>constructor</code>函数返回一个全新的对象，结果导致实例对象不是<code>Foo</code>类的实例。<br>类必须使用<code>new</code>调用，否则会报错。\b 这是它跟普通构造函数的一个主要区别，后者不用<code>new</code>也可以执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo()</span><br><span class=\"line\"><span class=\"comment\">// TypeError:Class constructor Foo cannot be invoked widthout 'new'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类的实例\"><a href=\"#类的实例\" class=\"headerlink\" title=\"类的实例\"></a>类的实例</h3><p>生成类的实例的写法，与 ES5 完全一样，也是使用<code>new</code>命令。前面说过，如果忘记加上<code>new</code>，像函数那样调用<code>Class</code>，将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point = Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>与 ES5 一样，实例的属性除非显示定义在其本身（即定义在<code>this</code>对象上），否则都是定义在原型上（即定义在<code>class</code>上）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (x,y) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">point.toString() <span class=\"comment\">//(2,3)</span></span><br><span class=\"line\">point.hasOwnProperty(<span class=\"string\">'x'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">point.hasOwnProperty(<span class=\"string\">'y'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">point.hasOwnProperty(<span class=\"string\">'toString'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">point.__proto__.hasOwnProperty(<span class=\"string\">'toString'</span>) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中,<code>x</code>和<code>y</code>都是实例对象<code>point</code>自身的属性（因为定义在<code>this</code>变量上），所以<code>hasOwnProperty</code>方法返回<code>true</code>，而<code>toString</code>是原型对象的属性（因为定义在<code>point</code>类是哪个），所以<code>hasOwnProperty</code>方法返回<code>false</code>。这些都与 ES5 的行为保持一致。<br>与 ES5 一样，类的所有实例都共享一个原型对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">p1.__proto__ === p2.__proto__</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"类的由来\"><a href=\"#类的由来\" class=\"headerlink\" title=\"类的由来\"></a>类的由来</h3><p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Point</span> (<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Point(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n<p>上面这种写法跟传统的面向对象语言（比如 C++和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑<br>ES6 提供了更接近 \b 传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过<code>class</code>关键词，可以定义类。<br>基本上，ES6<code>class</code>可以看做只是一个语法糖，他的绝大部分功能，ES5 都可以做到，新的<code>class</code>写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的<code>class</code>改写，就是下面这样。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (x,y) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">','</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>\b 上面代码定义了一个”类“，可以看到里面有一个<code>constructor</code>方法，这就是构造方法，而<code>this</code>关键词则代表实例对象。也就是说，ES5 的构造函数<code>Point</code>，对应 ES6 的<code>Point</code>类的构造方法。<br><code>Point</code>类除了构造方法，还定义了一个<code>toString</code>方法。注意，定义”类“的方法的时候，前面不需要加上<code>function</code>这个关键字，直接把桉树定义放进去就可以了。另外，方法之间也不需要都好分隔，加了会报错。<br>ES6 的类，完全可以看做构造函数的另一种方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> Point <span class=\"comment\">// \"function\"</span></span><br><span class=\"line\">Point === Point.prototype.constructor  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码表明，类的数据类型就是函数，类本身就指向构造函数。<br>使用的时候，也是直接对类使用<code>new</code>命令，跟构造函数的用法完全一致.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bar</span> </span>&#123;</span><br><span class=\"line\">    doStuff () &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'stuff);</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">var b = new Bar();</span></span><br><span class=\"line\"><span class=\"string\">b.doStuff()  // \"stuff\"</span></span><br></pre></td></tr></table></figure>\n<p>构造函数的<code>prototype</code>属性，在 ES6 的”类“上面继续存在。事实上，类的 \b 所有方法都定义在类的<code>prototype</code>属性上面。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toValue () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"></span><br><span class=\"line\">Point.prototype = &#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;&#125;,</span><br><span class=\"line\">    toString () &#123;&#125;,</span><br><span class=\"line\">    toValue () &#123;&#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在类的实例上面调用方法，其实就是调用原型上的方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> B()</span><br><span class=\"line\">b.constructor === B.prototype.constructor  <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>b</code>是<code>B</code>类的实例，它的<code>constructor</code>方法就是<code>B</code>类原型的<code>constructor</code>方法。<br>由于类的方法都定义在<code>prototype</code>对象上面，所以累的新方法可以添加在<code>prototype</code>对象上面。<code>Object.assign</code>方法可以很方便地一次向类添加多个方法。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    construtor () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ..</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(Point,prototype,&#123;</span><br><span class=\"line\">    toString () &#123;&#125;,</span><br><span class=\"line\">    toValue () &#123;&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><code>prototype</code>对象的<code>construtor</code>属性，直接指向”类“的本身，这与 ES5 的行为是一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Point.prototype.constructor === Point <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>另外，类的内部所有定义的方法，都是不可枚举的(non-enumerable)。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (x,y) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    toString () &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(Point.prototype)</span><br><span class=\"line\"><span class=\"comment\">// []</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(Point.prototype)</span><br><span class=\"line\"><span class=\"comment\">// [\"constructor\",\"toString\"]</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中，<code>toString</code>方法是<code>Point</code>类内部定义的方法，它是不可枚举。这一点与 ES5 的行为不一致。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> Point = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x,y</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Point.prototype.toString = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(Point.prototype)</span><br><span class=\"line\"><span class=\"comment\">// [\"toString\"]</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertyNames(Point.prototype)</span><br><span class=\"line\"><span class=\"comment\">// [\"constructor\",\"toString\"]</span></span><br></pre></td></tr></table></figure>\n<p>\b 上面采用 ES5 的写法，<code>toString</code>方法就是可枚举的。</p>\n<h3 id=\"constuctor-方法\"><a href=\"#constuctor-方法\" class=\"headerlink\" title=\"constuctor 方法\"></a>constuctor 方法</h3><p><code>constructor</code>方法是类的默认方法，通过<code>new</code>命令生成的对象实例时，自动调用该方法。一个类必须有<code>constructor</code>方法，如果没有显示定义，一个空的<code>constructor</code>方法会被默认添加。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//等同于</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码中，定义一个空的类<code>Point</code>，JavaScript 引擎会自动为它添加一个空的<code>construtor</code>方法。<br><code>constructor</code>方法默认返回实例对象（\b 即<code>this</code>），完全可以指定返回另外一个对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> Foo() <span class=\"keyword\">instanceof</span> Foo</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>上面的代码中，<code>constructor</code>函数返回一个全新的对象，结果导致实例对象不是<code>Foo</code>类的实例。<br>类必须使用<code>new</code>调用，否则会报错。\b 这是它跟普通构造函数的一个主要区别，后者不用<code>new</code>也可以执行。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Foo</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.create(<span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Foo()</span><br><span class=\"line\"><span class=\"comment\">// TypeError:Class constructor Foo cannot be invoked widthout 'new'</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"类的实例\"><a href=\"#类的实例\" class=\"headerlink\" title=\"类的实例\"></a>类的实例</h3><p>生成类的实例的写法，与 ES5 完全一样，也是使用<code>new</code>命令。前面说过，如果忘记加上<code>new</code>，像函数那样调用<code>Class</code>，将会报错。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point = Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<p>与 ES5 一样，实例的属性除非显示定义在其本身（即定义在<code>this</code>对象上），否则都是定义在原型上（即定义在<code>class</code>上）。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Point</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">constructor</span> (x,y) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.x = x</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.y = y</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    toString () &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'('</span> + <span class=\"keyword\">this</span>.x + <span class=\"string\">', '</span> + <span class=\"keyword\">this</span>.y + <span class=\"string\">')'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> point = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">point.toString() <span class=\"comment\">//(2,3)</span></span><br><span class=\"line\">point.hasOwnProperty(<span class=\"string\">'x'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">point.hasOwnProperty(<span class=\"string\">'y'</span>) <span class=\"comment\">// true</span></span><br><span class=\"line\">point.hasOwnProperty(<span class=\"string\">'toString'</span>) <span class=\"comment\">// false</span></span><br><span class=\"line\">point.__proto__.hasOwnProperty(<span class=\"string\">'toString'</span>) <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>上面代码中,<code>x</code>和<code>y</code>都是实例对象<code>point</code>自身的属性（因为定义在<code>this</code>变量上），所以<code>hasOwnProperty</code>方法返回<code>true</code>，而<code>toString</code>是原型对象的属性（因为定义在<code>point</code>类是哪个），所以<code>hasOwnProperty</code>方法返回<code>false</code>。这些都与 ES5 的行为保持一致。<br>与 ES5 一样，类的所有实例都共享一个原型对象。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Point(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Point(<span class=\"number\">3</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">p1.__proto__ === p2.__proto__</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Vue脚手架创建项目的时候卡在Download https://chromedriver.storage....","date":"2018-11-03T08:13:15.000Z","_content":"\n## npm 安装chromedriver失败解决办法\n\n在使用Vue-cli新建一个Vue项目的时候，在做完一系列项目init的操作完之后  \n`npm install`有时会出现:\n\n```\nDownloading https://chromedriver.storage.googleapis.com/2.27/chromedriver_mac64.zip\nSaving to  /var/folders/7l/mhhqzhps0y59by7pf04nyx5r0000gn/T/chromedriver/chromedriver_mac64.zip\n```\n出现这个的时候，可能会一直卡在这里，什么也做不了，实际上项目的包已经安装好了  \n经分析发现，某些版本下，chromedriver 的 zip 文件 url 的响应是 302 跳转，而在 install.js 里使用的是 Node.js 内置的 http 对象的 get 方法无法处理 302 跳转的情况；而在另外一些情况下，则是因为 googleapis.com 被墙了，此时即使采用科学上网的方法也仍然无法获取文件。\n\n无论是上述哪种情况，可以使用下面的命令安装：\n\n>npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver\n\n或者用cnpm安装包依赖\n\n文章来自:[segmentfault](https://segmentfault.com/a/1190000008310875)","source":"_posts/Vue脚手架创建的时候卡在Download-https-chromedriver-storage.md","raw":"---\ntitle: 'Vue脚手架创建项目的时候卡在Download https://chromedriver.storage....'\ndate: 2018-11-03 16:13:15\ntags:\n    -Vue\n---\n\n## npm 安装chromedriver失败解决办法\n\n在使用Vue-cli新建一个Vue项目的时候，在做完一系列项目init的操作完之后  \n`npm install`有时会出现:\n\n```\nDownloading https://chromedriver.storage.googleapis.com/2.27/chromedriver_mac64.zip\nSaving to  /var/folders/7l/mhhqzhps0y59by7pf04nyx5r0000gn/T/chromedriver/chromedriver_mac64.zip\n```\n出现这个的时候，可能会一直卡在这里，什么也做不了，实际上项目的包已经安装好了  \n经分析发现，某些版本下，chromedriver 的 zip 文件 url 的响应是 302 跳转，而在 install.js 里使用的是 Node.js 内置的 http 对象的 get 方法无法处理 302 跳转的情况；而在另外一些情况下，则是因为 googleapis.com 被墙了，此时即使采用科学上网的方法也仍然无法获取文件。\n\n无论是上述哪种情况，可以使用下面的命令安装：\n\n>npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver\n\n或者用cnpm安装包依赖\n\n文章来自:[segmentfault](https://segmentfault.com/a/1190000008310875)","slug":"Vue脚手架创建的时候卡在Download-https-chromedriver-storage","published":1,"updated":"2019-01-01T04:29:20.318Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs5qls0n0007nizi4326fzft","content":"<h2 id=\"npm-安装chromedriver失败解决办法\"><a href=\"#npm-安装chromedriver失败解决办法\" class=\"headerlink\" title=\"npm 安装chromedriver失败解决办法\"></a>npm 安装chromedriver失败解决办法</h2><p>在使用Vue-cli新建一个Vue项目的时候，在做完一系列项目init的操作完之后<br><code>npm install</code>有时会出现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Downloading https://chromedriver.storage.googleapis.com/2.27/chromedriver_mac64.zip</span><br><span class=\"line\">Saving to  /var/folders/7l/mhhqzhps0y59by7pf04nyx5r0000gn/T/chromedriver/chromedriver_mac64.zip</span><br></pre></td></tr></table></figure>\n<p>出现这个的时候，可能会一直卡在这里，什么也做不了，实际上项目的包已经安装好了<br>经分析发现，某些版本下，chromedriver 的 zip 文件 url 的响应是 302 跳转，而在 install.js 里使用的是 Node.js 内置的 http 对象的 get 方法无法处理 302 跳转的情况；而在另外一些情况下，则是因为 googleapis.com 被墙了，此时即使采用科学上网的方法也仍然无法获取文件。</p>\n<p>无论是上述哪种情况，可以使用下面的命令安装：</p>\n<blockquote>\n<p>npm install chromedriver –chromedriver_cdnurl=<a href=\"http://cdn.npm.taobao.org/dist/chromedriver\" target=\"_blank\" rel=\"noopener\">http://cdn.npm.taobao.org/dist/chromedriver</a></p>\n</blockquote>\n<p>或者用cnpm安装包依赖</p>\n<p>文章来自:<a href=\"https://segmentfault.com/a/1190000008310875\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"npm-安装chromedriver失败解决办法\"><a href=\"#npm-安装chromedriver失败解决办法\" class=\"headerlink\" title=\"npm 安装chromedriver失败解决办法\"></a>npm 安装chromedriver失败解决办法</h2><p>在使用Vue-cli新建一个Vue项目的时候，在做完一系列项目init的操作完之后<br><code>npm install</code>有时会出现:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Downloading https://chromedriver.storage.googleapis.com/2.27/chromedriver_mac64.zip</span><br><span class=\"line\">Saving to  /var/folders/7l/mhhqzhps0y59by7pf04nyx5r0000gn/T/chromedriver/chromedriver_mac64.zip</span><br></pre></td></tr></table></figure>\n<p>出现这个的时候，可能会一直卡在这里，什么也做不了，实际上项目的包已经安装好了<br>经分析发现，某些版本下，chromedriver 的 zip 文件 url 的响应是 302 跳转，而在 install.js 里使用的是 Node.js 内置的 http 对象的 get 方法无法处理 302 跳转的情况；而在另外一些情况下，则是因为 googleapis.com 被墙了，此时即使采用科学上网的方法也仍然无法获取文件。</p>\n<p>无论是上述哪种情况，可以使用下面的命令安装：</p>\n<blockquote>\n<p>npm install chromedriver –chromedriver_cdnurl=<a href=\"http://cdn.npm.taobao.org/dist/chromedriver\" target=\"_blank\" rel=\"noopener\">http://cdn.npm.taobao.org/dist/chromedriver</a></p>\n</blockquote>\n<p>或者用cnpm安装包依赖</p>\n<p>文章来自:<a href=\"https://segmentfault.com/a/1190000008310875\" target=\"_blank\" rel=\"noopener\">segmentfault</a></p>\n"},{"title":"vscode下.vue文件初始化","date":"2018-10-06T08:38:53.000Z","_content":"\n## vscode下.vue文件初始化\n当我们在使用vscode编写vue文件的时候，每次都需要输入`<template></template>`,`<script></script>`,`<style></style>`这些标签  \n如何像我们之前一样写html使用emmet插件一样使用 `!`自动出来html的格式呢\n<!-- more -->\n### 1 安装Vetur扩展让VScode支持.vue文件名\n### 2 然后打开 菜单栏=>Code=>首选项=>用户代码片段=>选择vue\n### 3 打开后发现是一个json文件，里面都是注释，不用管它，我们再后面添加\n```JavaScript\n\"Vue Init\":{\n        \"prefix\": \"vue\",\n        \"description\": \"初始化Vue单文件组件模板\",\n        \"body\": [\n            \"<template>\",\n            \"$1\",\n            \"</template>\",\n            \"<script>\",\n            \"export default {\",\n            \"   name:'$2',\",\n            \"}\",\n            \"</script>\",\n            \"<style scoped>\",\n            \"$3\",\n            \"</style>\",\n            \"\"\n        ]\n    }\n```\n### 4 新建任一一个vue文件，第一行输入`vue`，会弹出来以下提示，按enter就ok了\n![](/images/blog-img/18-10-7/1.png'描述')\n<img src=\"/images/blog-img/18-10-7/1.png\">\n","source":"_posts/vscode下-vue文件初始化.md","raw":"---\ntitle: vscode下.vue文件初始化\ndate: 2018-10-06 16:38:53\ntags:\n    -Vue\n    -vscode\ncategories:\n---\n\n## vscode下.vue文件初始化\n当我们在使用vscode编写vue文件的时候，每次都需要输入`<template></template>`,`<script></script>`,`<style></style>`这些标签  \n如何像我们之前一样写html使用emmet插件一样使用 `!`自动出来html的格式呢\n<!-- more -->\n### 1 安装Vetur扩展让VScode支持.vue文件名\n### 2 然后打开 菜单栏=>Code=>首选项=>用户代码片段=>选择vue\n### 3 打开后发现是一个json文件，里面都是注释，不用管它，我们再后面添加\n```JavaScript\n\"Vue Init\":{\n        \"prefix\": \"vue\",\n        \"description\": \"初始化Vue单文件组件模板\",\n        \"body\": [\n            \"<template>\",\n            \"$1\",\n            \"</template>\",\n            \"<script>\",\n            \"export default {\",\n            \"   name:'$2',\",\n            \"}\",\n            \"</script>\",\n            \"<style scoped>\",\n            \"$3\",\n            \"</style>\",\n            \"\"\n        ]\n    }\n```\n### 4 新建任一一个vue文件，第一行输入`vue`，会弹出来以下提示，按enter就ok了\n![](/images/blog-img/18-10-7/1.png'描述')\n<img src=\"/images/blog-img/18-10-7/1.png\">\n","slug":"vscode下-vue文件初始化","published":1,"updated":"2019-01-19T06:03:08.551Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs5qls0p0008nizi4ry732l6","content":"<h2 id=\"vscode下-vue文件初始化\"><a href=\"#vscode下-vue文件初始化\" class=\"headerlink\" title=\"vscode下.vue文件初始化\"></a>vscode下.vue文件初始化</h2><p>当我们在使用vscode编写vue文件的时候，每次都需要输入<code>&lt;template&gt;&lt;/template&gt;</code>,<code>&lt;script&gt;&lt;/script&gt;</code>,<code>&lt;style&gt;&lt;/style&gt;</code>这些标签<br>如何像我们之前一样写html使用emmet插件一样使用 <code>!</code>自动出来html的格式呢<br><a id=\"more\"></a></p>\n<h3 id=\"1-安装Vetur扩展让VScode支持-vue文件名\"><a href=\"#1-安装Vetur扩展让VScode支持-vue文件名\" class=\"headerlink\" title=\"1 安装Vetur扩展让VScode支持.vue文件名\"></a>1 安装Vetur扩展让VScode支持.vue文件名</h3><h3 id=\"2-然后打开-菜单栏-gt-Code-gt-首选项-gt-用户代码片段-gt-选择vue\"><a href=\"#2-然后打开-菜单栏-gt-Code-gt-首选项-gt-用户代码片段-gt-选择vue\" class=\"headerlink\" title=\"2 然后打开 菜单栏=&gt;Code=&gt;首选项=&gt;用户代码片段=&gt;选择vue\"></a>2 然后打开 菜单栏=&gt;Code=&gt;首选项=&gt;用户代码片段=&gt;选择vue</h3><h3 id=\"3-打开后发现是一个json文件，里面都是注释，不用管它，我们再后面添加\"><a href=\"#3-打开后发现是一个json文件，里面都是注释，不用管它，我们再后面添加\" class=\"headerlink\" title=\"3 打开后发现是一个json文件，里面都是注释，不用管它，我们再后面添加\"></a>3 打开后发现是一个json文件，里面都是注释，不用管它，我们再后面添加</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Vue Init\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"description\"</span>: <span class=\"string\">\"初始化Vue单文件组件模板\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"body\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"&lt;template&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"$1\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;/template&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;script&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"export default &#123;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"   name:'$2',\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&#125;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;/script&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;style scoped&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"$3\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;/style&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-新建任一一个vue文件，第一行输入vue，会弹出来以下提示，按enter就ok了\"><a href=\"#4-新建任一一个vue文件，第一行输入vue，会弹出来以下提示，按enter就ok了\" class=\"headerlink\" title=\"4 新建任一一个vue文件，第一行输入vue，会弹出来以下提示，按enter就ok了\"></a>4 新建任一一个vue文件，第一行输入<code>vue</code>，会弹出来以下提示，按enter就ok了</h3><p><img src=\"/images/blog-img/18-10-7/1.png&#39;描述&#39;\" alt=\"\"><br><img src=\"/images/blog-img/18-10-7/1.png\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"vscode下-vue文件初始化\"><a href=\"#vscode下-vue文件初始化\" class=\"headerlink\" title=\"vscode下.vue文件初始化\"></a>vscode下.vue文件初始化</h2><p>当我们在使用vscode编写vue文件的时候，每次都需要输入<code>&lt;template&gt;&lt;/template&gt;</code>,<code>&lt;script&gt;&lt;/script&gt;</code>,<code>&lt;style&gt;&lt;/style&gt;</code>这些标签<br>如何像我们之前一样写html使用emmet插件一样使用 <code>!</code>自动出来html的格式呢<br>","more":"</p>\n<h3 id=\"1-安装Vetur扩展让VScode支持-vue文件名\"><a href=\"#1-安装Vetur扩展让VScode支持-vue文件名\" class=\"headerlink\" title=\"1 安装Vetur扩展让VScode支持.vue文件名\"></a>1 安装Vetur扩展让VScode支持.vue文件名</h3><h3 id=\"2-然后打开-菜单栏-gt-Code-gt-首选项-gt-用户代码片段-gt-选择vue\"><a href=\"#2-然后打开-菜单栏-gt-Code-gt-首选项-gt-用户代码片段-gt-选择vue\" class=\"headerlink\" title=\"2 然后打开 菜单栏=&gt;Code=&gt;首选项=&gt;用户代码片段=&gt;选择vue\"></a>2 然后打开 菜单栏=&gt;Code=&gt;首选项=&gt;用户代码片段=&gt;选择vue</h3><h3 id=\"3-打开后发现是一个json文件，里面都是注释，不用管它，我们再后面添加\"><a href=\"#3-打开后发现是一个json文件，里面都是注释，不用管它，我们再后面添加\" class=\"headerlink\" title=\"3 打开后发现是一个json文件，里面都是注释，不用管它，我们再后面添加\"></a>3 打开后发现是一个json文件，里面都是注释，不用管它，我们再后面添加</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"Vue Init\"</span>:&#123;</span><br><span class=\"line\">        <span class=\"string\">\"prefix\"</span>: <span class=\"string\">\"vue\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"description\"</span>: <span class=\"string\">\"初始化Vue单文件组件模板\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"body\"</span>: [</span><br><span class=\"line\">            <span class=\"string\">\"&lt;template&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"$1\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;/template&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;script&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"export default &#123;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"   name:'$2',\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&#125;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;/script&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;style scoped&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"$3\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"&lt;/style&gt;\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"\"</span></span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-新建任一一个vue文件，第一行输入vue，会弹出来以下提示，按enter就ok了\"><a href=\"#4-新建任一一个vue文件，第一行输入vue，会弹出来以下提示，按enter就ok了\" class=\"headerlink\" title=\"4 新建任一一个vue文件，第一行输入vue，会弹出来以下提示，按enter就ok了\"></a>4 新建任一一个vue文件，第一行输入<code>vue</code>，会弹出来以下提示，按enter就ok了</h3><p><img src=\"/images/blog-img/18-10-7/1.png&#39;描述&#39;\" alt=\"\"><br><img src=\"/images/blog-img/18-10-7/1.png\"></p>"},{"title":"Vue在安卓低版本兼容问题","date":"2018-11-03T07:44:57.000Z","_content":"\n## Vue在安卓低版本的兼容问题\n在弄公司的项目的时候\b，打包完部署到测试环境上，发现有的低版本安卓有些样式不兼容，\b甚至有些数据请求不出来。\n\n网上查了一些方法，现在列出来：\n### 1.npm 安装 `bable-polyfill` `es6-promise`\n>\n    npm install babel-polyfill  \n    npm install es6-promise\n\n### 2.安装完在项目\b根目录会出现：\n\n>\n    \"bable-polyfill\":\"^6.xxx\",\n    \"es6-promise\":\"^4.xxx\"\n\n### 3.在项目入口文件`main.js`引入下面这段代码：\n\n```Javascript\n    \"import 'bable-polyfill\"\n    \"import 'es6-promise\"\n```\n\n### 4.在`build`文件下的`webpack.base.conf.js`添加下面一段\n\n```Javascript\n    module.exports = {\n        context: path.resolve(__dirname,'../'),\n        entry:{\n            // app:'./src/main.js'  //原来的注释掉 \b换成下面的\n            app:[\"babel-polyfill\",\"./src/main.js\"]\n        }\n    }\n```\n### 5.重新打包部署\b，就可以支持低版本的安卓，我测试最低的支持5.0","source":"_posts/Vue在安卓低版本兼容问题.md","raw":"---\ntitle: Vue在安卓低版本兼容问题\ndate: 2018-11-03 15:44:57\ntags: \n    -Vue\n---\n\n## Vue在安卓低版本的兼容问题\n在弄公司的项目的时候\b，打包完部署到测试环境上，发现有的低版本安卓有些样式不兼容，\b甚至有些数据请求不出来。\n\n网上查了一些方法，现在列出来：\n### 1.npm 安装 `bable-polyfill` `es6-promise`\n>\n    npm install babel-polyfill  \n    npm install es6-promise\n\n### 2.安装完在项目\b根目录会出现：\n\n>\n    \"bable-polyfill\":\"^6.xxx\",\n    \"es6-promise\":\"^4.xxx\"\n\n### 3.在项目入口文件`main.js`引入下面这段代码：\n\n```Javascript\n    \"import 'bable-polyfill\"\n    \"import 'es6-promise\"\n```\n\n### 4.在`build`文件下的`webpack.base.conf.js`添加下面一段\n\n```Javascript\n    module.exports = {\n        context: path.resolve(__dirname,'../'),\n        entry:{\n            // app:'./src/main.js'  //原来的注释掉 \b换成下面的\n            app:[\"babel-polyfill\",\"./src/main.js\"]\n        }\n    }\n```\n### 5.重新打包部署\b，就可以支持低版本的安卓，我测试最低的支持5.0","slug":"Vue在安卓低版本兼容问题","published":1,"updated":"2019-01-01T04:29:22.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs5qls0q0009nizip60tlxpo","content":"<h2 id=\"Vue在安卓低版本的兼容问题\"><a href=\"#Vue在安卓低版本的兼容问题\" class=\"headerlink\" title=\"Vue在安卓低版本的兼容问题\"></a>Vue在安卓低版本的兼容问题</h2><p>在弄公司的项目的时候\b，打包完部署到测试环境上，发现有的低版本安卓有些样式不兼容，\b甚至有些数据请求不出来。</p>\n<p>网上查了一些方法，现在列出来：</p>\n<h3 id=\"1-npm-安装-bable-polyfill-es6-promise\"><a href=\"#1-npm-安装-bable-polyfill-es6-promise\" class=\"headerlink\" title=\"1.npm 安装 bable-polyfill es6-promise\"></a>1.npm 安装 <code>bable-polyfill</code> <code>es6-promise</code></h3><blockquote>\n</blockquote>\n<pre><code>npm install babel-polyfill  \nnpm install es6-promise\n</code></pre><h3 id=\"2-安装完在项目根目录会出现：\"><a href=\"#2-安装完在项目根目录会出现：\" class=\"headerlink\" title=\"2.安装完在项目\b根目录会出现：\"></a>2.安装完在项目\b根目录会出现：</h3><blockquote>\n</blockquote>\n<pre><code>&quot;bable-polyfill&quot;:&quot;^6.xxx&quot;,\n&quot;es6-promise&quot;:&quot;^4.xxx&quot;\n</code></pre><h3 id=\"3-在项目入口文件main-js引入下面这段代码：\"><a href=\"#3-在项目入口文件main-js引入下面这段代码：\" class=\"headerlink\" title=\"3.在项目入口文件main.js引入下面这段代码：\"></a>3.在项目入口文件<code>main.js</code>引入下面这段代码：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"import 'bable-polyfill\"</span></span><br><span class=\"line\"><span class=\"string\">\"import 'es6-promise\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-在build文件下的webpack-base-conf-js添加下面一段\"><a href=\"#4-在build文件下的webpack-base-conf-js添加下面一段\" class=\"headerlink\" title=\"4.在build文件下的webpack.base.conf.js添加下面一段\"></a>4.在<code>build</code>文件下的<code>webpack.base.conf.js</code>添加下面一段</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    context: path.resolve(__dirname,<span class=\"string\">'../'</span>),</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        <span class=\"comment\">// app:'./src/main.js'  //原来的注释掉 \b换成下面的</span></span><br><span class=\"line\">        app:[<span class=\"string\">\"babel-polyfill\"</span>,<span class=\"string\">\"./src/main.js\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-重新打包部署，就可以支持低版本的安卓，我测试最低的支持5-0\"><a href=\"#5-重新打包部署，就可以支持低版本的安卓，我测试最低的支持5-0\" class=\"headerlink\" title=\"5.重新打包部署\b，就可以支持低版本的安卓，我测试最低的支持5.0\"></a>5.重新打包部署\b，就可以支持低版本的安卓，我测试最低的支持5.0</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue在安卓低版本的兼容问题\"><a href=\"#Vue在安卓低版本的兼容问题\" class=\"headerlink\" title=\"Vue在安卓低版本的兼容问题\"></a>Vue在安卓低版本的兼容问题</h2><p>在弄公司的项目的时候\b，打包完部署到测试环境上，发现有的低版本安卓有些样式不兼容，\b甚至有些数据请求不出来。</p>\n<p>网上查了一些方法，现在列出来：</p>\n<h3 id=\"1-npm-安装-bable-polyfill-es6-promise\"><a href=\"#1-npm-安装-bable-polyfill-es6-promise\" class=\"headerlink\" title=\"1.npm 安装 bable-polyfill es6-promise\"></a>1.npm 安装 <code>bable-polyfill</code> <code>es6-promise</code></h3><blockquote>\n</blockquote>\n<pre><code>npm install babel-polyfill  \nnpm install es6-promise\n</code></pre><h3 id=\"2-安装完在项目根目录会出现：\"><a href=\"#2-安装完在项目根目录会出现：\" class=\"headerlink\" title=\"2.安装完在项目\b根目录会出现：\"></a>2.安装完在项目\b根目录会出现：</h3><blockquote>\n</blockquote>\n<pre><code>&quot;bable-polyfill&quot;:&quot;^6.xxx&quot;,\n&quot;es6-promise&quot;:&quot;^4.xxx&quot;\n</code></pre><h3 id=\"3-在项目入口文件main-js引入下面这段代码：\"><a href=\"#3-在项目入口文件main-js引入下面这段代码：\" class=\"headerlink\" title=\"3.在项目入口文件main.js引入下面这段代码：\"></a>3.在项目入口文件<code>main.js</code>引入下面这段代码：</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"import 'bable-polyfill\"</span></span><br><span class=\"line\"><span class=\"string\">\"import 'es6-promise\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-在build文件下的webpack-base-conf-js添加下面一段\"><a href=\"#4-在build文件下的webpack-base-conf-js添加下面一段\" class=\"headerlink\" title=\"4.在build文件下的webpack.base.conf.js添加下面一段\"></a>4.在<code>build</code>文件下的<code>webpack.base.conf.js</code>添加下面一段</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    context: path.resolve(__dirname,<span class=\"string\">'../'</span>),</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        <span class=\"comment\">// app:'./src/main.js'  //原来的注释掉 \b换成下面的</span></span><br><span class=\"line\">        app:[<span class=\"string\">\"babel-polyfill\"</span>,<span class=\"string\">\"./src/main.js\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-重新打包部署，就可以支持低版本的安卓，我测试最低的支持5-0\"><a href=\"#5-重新打包部署，就可以支持低版本的安卓，我测试最低的支持5-0\" class=\"headerlink\" title=\"5.重新打包部署\b，就可以支持低版本的安卓，我测试最低的支持5.0\"></a>5.重新打包部署\b，就可以支持低版本的安卓，我测试最低的支持5.0</h3>"},{"title":"promise使用","date":"2019-01-02T04:36:21.000Z","_content":"","source":"_posts/promise使用.md","raw":"---\ntitle: promise使用\ndate: 2019-01-02 12:36:21\ntags:\n    \n---\n","slug":"promise使用","published":1,"updated":"2019-01-02T04:36:40.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs5qls0s000cnizi4r73pd90","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Vue中使用scss和scss语法使用","date":"2019-01-01T05:55:49.000Z","_content":"## Vue中使用SCSS\n### 1.scss介绍\n\nSass是成熟、稳定、强大的CSS预处理器，而SCSS是Sass3版本当中引入的新语法特性，完全兼容CSS3的同时继承了Sass强大的动态功能   \n### 2.特性\nCSS书写代码规模较大的Web应用时，容易造成选择器、层叠的复杂度过高，因此推荐通过SASS预处理器进行CSS的开发，SASS提供的变量、嵌套、混合、继承等特性，让CSS的书写更加有趣与程式化。\n### 3.安装\n>npm install node-sass -S   \n>npm install sass-loader -S  \n\n修改`build/webpack.base.conf.js`在`module.exports={...}`中的`module:{...}`添加     \n\n```JavaScript\n    module.exports = {\n        context:path.resolve(__dirname,'../')\n        entry:{\n            app:'./src/main.js'\n        },\n        ...\n        modules:{\n            rules:[\n                {\n                    test:/\\.vue$/,\n                    loader:'vue-loader',\n                    options:vueLoaderConfig\n                },\n                ...\n                //下面是添加的代码\n                {\n                    test:/\\.sass$/,\n                    loader:['style','css','sass']\n                }\n            ]\n        }\n    }\n```\n### 4.sass/scss语法介绍\n#### 变量\n变量用来存储需要在CSS中复用的信息，例如颜色和字体。SASS通过$符号去声明一个变量。   \n```css\n    $color:#333;\n    body{\n        color:$color;\n        background:$color;\n    }\n```\n上面的将会转化为:\n```css\n    body{\n        color:#333;\n        background:#333;\n    }\n```\n#### 嵌套\nSASS允许开发人员以嵌套的方式使用CSS，但是过度的使用嵌套会让产生的CSS难以维护，因此是一种不好的实践，下面的例子表达了一个典型的网站导航样式\n```css\n    $normalColor:#f7f7f7\n    nav {\n        width:100%;\n        ul {\n            list-style:none;\n            li {\n                width:100%\n                a {\n                    color:$normalColor\n                }\n            }\n        }\n    }\n```\n上面代码将转为：\n```css\n    nav {\n        width:100%;\n    }\n    nav ul {\n        list-style:none;\n    }\n    nav ul li {\n        width:100%;\n    }\n    nav ul li a {\n        color:#f7f7f7\n    }\n```\n#### 引入\nSASS能够将代码分割为多个片段，并以underscore风格的下划线作为其命名前缀（_partial.scss），SASS会通过这些下划线来辨别哪些文件是SASS片段，并且不让片段内容直接生成为CSS文件，从而只是在使用@import指令的位置被导入。CSS原生的@import会通过额外的HTTP请求获取引入的样式片段，而SASS的@import则会直接将这些引入的片段合并至当前CSS文件，并且不会产生新的HTTP请求。下面例子中的代码，将会在base.scss文件当中引入_reset.scss片断。\n```css\n    // _reset.scss\n    html, body, ul, ol {\n        margin:  0;\n        padding: 0;\n    }\n\n    // base.scss\n    @import 'reset';\n    body {\n        font: 100% Helvetica, sans-serif;\n        background-color: #efefef;\n    }\n```\nSASS中引入片断时，可以缺省使用文件扩展名，因此上面代码中直接通过@import 'reset'引入，编译后生成的代码如下：\n```css\n    html, body, ul, ol {\n        margin: 0;\n        padding: 0; \n    }\n\n    body {\n        font: 100% Helvetica, sans-serif;\n        background-color: #efefef; \n    }\n```\n#### 混合\n混合（Mixin）用来分组那些需要在页面中复用的CSS声明，开发人员可以通过向Mixin传递变量参数来让代码更加灵活，该特性在添加浏览器兼容性前缀的时候非常有用，SASS目前使用@mixin name指令来进行混合操作。\n```css\n    @mixin border-radius($radius) {\n                border-radius: $radius;\n            -ms-border-radius: $radius;\n            -moz-border-radius: $radius;\n        -webkit-border-radius: $radius;\n    }\n\n    .box {\n        @include border-radius(10px);\n    }\n\n```\n上面的代码建立了一个名为border-radius的Mixin，并传递了一个变量$radius作为参数，然后在后续代码中通过@include border-radius(10px)使用该Mixin，最终编译的结果如下：\n```css\n    .box {\n        border-radius: 10px;\n        -ms-border-radius: 10px;\n        -moz-border-radius: 10px;\n        -webkit-border-radius: 10px; \n    }\n```\n#### 继承\n继承是SASS中非常重要的一个特性，可以通过@extend指令在选择器之间复用CSS属性，并且不会产生冗余的代码，下面例子将会通过SASS提供的继承机制建立一系列样式：\n```css\n    // 这段代码不会被输出到最终生成的CSS文件，因为它没有被任何代码所继承。\n    %other-styles {\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    // 下面代码会正常输出到生成的CSS文件，因为它被其接下来的代码所继承。\n    %message-common {\n        border: 1px solid #ccc;\n        padding: 10px;\n        color: #333;\n    }\n\n    .message {\n        @extend %message-common;\n    }\n\n    .success {\n        @extend %message-common;\n        border-color: green;\n    }\n\n    .error {\n        @extend %message-common;\n        border-color: red;\n    }\n\n    .warning {\n        @extend %message-common;\n        border-color: yellow;\n    }\n\n```\n上面代码将.message中的CSS属性应用到了.success、.error、.warning上面，魔法将会发生在最终生成的CSS当中。这种方式能够避免在HTML元素上书写多个class选择器，最终生成的CSS样式是下面这样的：\n```css\n    .message, .success, .error, .warning {\n        border: 1px solid #ccc;\n        padding: 10px;\n        color: #333; \n    }\n\n    .success {\n        border-color: green; \n    }\n\n    .error {\n        border-color: red; \n    }\n\n    .warning {\n        border-color: yellow; \n    }\n\n```\n#### 操作符\nSASS提供了标准的算术运算符，例如+、-、*、/、%。在接下来的例子里，我们尝试在aside和article选择器当中对宽度进行简单的计算。\n```css\n    .container { width: 100%; }\n\n    article[role=\"main\"] {\n        float: left;\n        width: 600px / 960px * 100%;\n    }\n\n    aside[role=\"complementary\"] {\n        float: right;\n        width: 300px / 960px * 100%;\n    }\n\n```\n上面代码以960px为基准建立了简单的流式网格布局，SASS提供的算术运算符让开发人员可以更容易的将像素值转换为百分比，最终生成的CSS样式如下所示：\n```css\n    .container {\n        width: 100%; \n    }\n\n    article[role=\"main\"] {\n        float: left;\n        width: 62.5%; \n    }\n\n    aside[role=\"complementary\"] {\n        float: right;\n        width: 31.25%; \n    }\n```\n#### CSS扩展\nScss使用\"&\"关键字在CSS规则中引用父级选择器，例如在嵌套使用伪类选择器的场景下：\n```css\n/*===== SCSS =====*/\n    a {\n        font-weight: bold;\n        text-decoration: none;\n        &:hover { text-decoration: underline; }\n        body.firefox & { font-weight: normal; }\n    }\n\n    /*===== CSS =====*/\n    a {\n        font-weight: bold;\n        text-decoration: none; \n    }\n    a:hover {\n        text-decoration: underline;\n    }\n    body.firefox a {\n        font-weight: normal; \n    }\n```\n无论CSS规则嵌套的深度怎样，关键字\"&\"都会使用父级选择器级联替换全部其出现的位置：\n```css\n    /*===== SCSS =====*/\n    #main {\n        color: black;\n        a {\n            font-weight: bold;\n            &:hover { color: red; }\n        }\n    }\n\n/*===== CSS =====*/\n    #main {\n        color: black; \n    }\n    #main a {\n        font-weight: bold; \n    }\n    #main a:hover {\n      color: red; \n    }\n\n```\n\"&\"必须出现在复合选择器开头的位置，后面再连接自定义的后缀，例如：\n```css\n    /*===== SCSS =====*/\n    #main {\n        color: black;\n        &-sidebar { \n            border: 1px solid; \n        }\n    }\n\n    /*===== CSS =====*/\n    #main {\n        color: black; \n    }\n    #main-sidebar {\n        border: 1px solid; \n    }\n\n```\n如果在父级选择器不存在的场景使用&，Scss预处理器会报出错误信息。\n#### 嵌套属性\nCSS许多属性都位于相同的命名空间（例如font-family、font-size、font-weight都位于font命名空间下），Scss当中只需要编写命名空间一次，后续嵌套的子属性都将会位于该命名空间之下，请看下面的代码：\n```css\n    /*===== SCSS =====*/\n    .demo {\n    // 命令空间后带有冒号:\n        font: {\n            family: fantasy;\n            size: 30em;\n            weight: bold;\n        }\n    }\n\n    /*===== CSS =====*/\n    .demo {\n        font-family: fantasy;\n        font-size: 30em;\n        font-weight: bold; \n    }\n\n```\n命令空间上可以直接书写CSS简写属性，但是日常开发中建议直接书写CSS简写属性，尽量保持CSS语法的一致性。\n```css\n    .demo {\n        font: 20px/24px fantasy {\n            weight: bold;\n        }\n    }\n\n    .demo {\n        font: 20px/24px fantasy;\n            font-weight: bold;\n        }sass\n\n```\n参考文章 [简书](https://www.jianshu.com/p/a99764ff3c41)\n\n","source":"_posts/Vue中使用scss和sass语法.md","raw":"---\ntitle: Vue中使用scss和scss语法使用\ndate: 2019-01-01 13:55:49\ntags:\n    -Vue\n---\n## Vue中使用SCSS\n### 1.scss介绍\n\nSass是成熟、稳定、强大的CSS预处理器，而SCSS是Sass3版本当中引入的新语法特性，完全兼容CSS3的同时继承了Sass强大的动态功能   \n### 2.特性\nCSS书写代码规模较大的Web应用时，容易造成选择器、层叠的复杂度过高，因此推荐通过SASS预处理器进行CSS的开发，SASS提供的变量、嵌套、混合、继承等特性，让CSS的书写更加有趣与程式化。\n### 3.安装\n>npm install node-sass -S   \n>npm install sass-loader -S  \n\n修改`build/webpack.base.conf.js`在`module.exports={...}`中的`module:{...}`添加     \n\n```JavaScript\n    module.exports = {\n        context:path.resolve(__dirname,'../')\n        entry:{\n            app:'./src/main.js'\n        },\n        ...\n        modules:{\n            rules:[\n                {\n                    test:/\\.vue$/,\n                    loader:'vue-loader',\n                    options:vueLoaderConfig\n                },\n                ...\n                //下面是添加的代码\n                {\n                    test:/\\.sass$/,\n                    loader:['style','css','sass']\n                }\n            ]\n        }\n    }\n```\n### 4.sass/scss语法介绍\n#### 变量\n变量用来存储需要在CSS中复用的信息，例如颜色和字体。SASS通过$符号去声明一个变量。   \n```css\n    $color:#333;\n    body{\n        color:$color;\n        background:$color;\n    }\n```\n上面的将会转化为:\n```css\n    body{\n        color:#333;\n        background:#333;\n    }\n```\n#### 嵌套\nSASS允许开发人员以嵌套的方式使用CSS，但是过度的使用嵌套会让产生的CSS难以维护，因此是一种不好的实践，下面的例子表达了一个典型的网站导航样式\n```css\n    $normalColor:#f7f7f7\n    nav {\n        width:100%;\n        ul {\n            list-style:none;\n            li {\n                width:100%\n                a {\n                    color:$normalColor\n                }\n            }\n        }\n    }\n```\n上面代码将转为：\n```css\n    nav {\n        width:100%;\n    }\n    nav ul {\n        list-style:none;\n    }\n    nav ul li {\n        width:100%;\n    }\n    nav ul li a {\n        color:#f7f7f7\n    }\n```\n#### 引入\nSASS能够将代码分割为多个片段，并以underscore风格的下划线作为其命名前缀（_partial.scss），SASS会通过这些下划线来辨别哪些文件是SASS片段，并且不让片段内容直接生成为CSS文件，从而只是在使用@import指令的位置被导入。CSS原生的@import会通过额外的HTTP请求获取引入的样式片段，而SASS的@import则会直接将这些引入的片段合并至当前CSS文件，并且不会产生新的HTTP请求。下面例子中的代码，将会在base.scss文件当中引入_reset.scss片断。\n```css\n    // _reset.scss\n    html, body, ul, ol {\n        margin:  0;\n        padding: 0;\n    }\n\n    // base.scss\n    @import 'reset';\n    body {\n        font: 100% Helvetica, sans-serif;\n        background-color: #efefef;\n    }\n```\nSASS中引入片断时，可以缺省使用文件扩展名，因此上面代码中直接通过@import 'reset'引入，编译后生成的代码如下：\n```css\n    html, body, ul, ol {\n        margin: 0;\n        padding: 0; \n    }\n\n    body {\n        font: 100% Helvetica, sans-serif;\n        background-color: #efefef; \n    }\n```\n#### 混合\n混合（Mixin）用来分组那些需要在页面中复用的CSS声明，开发人员可以通过向Mixin传递变量参数来让代码更加灵活，该特性在添加浏览器兼容性前缀的时候非常有用，SASS目前使用@mixin name指令来进行混合操作。\n```css\n    @mixin border-radius($radius) {\n                border-radius: $radius;\n            -ms-border-radius: $radius;\n            -moz-border-radius: $radius;\n        -webkit-border-radius: $radius;\n    }\n\n    .box {\n        @include border-radius(10px);\n    }\n\n```\n上面的代码建立了一个名为border-radius的Mixin，并传递了一个变量$radius作为参数，然后在后续代码中通过@include border-radius(10px)使用该Mixin，最终编译的结果如下：\n```css\n    .box {\n        border-radius: 10px;\n        -ms-border-radius: 10px;\n        -moz-border-radius: 10px;\n        -webkit-border-radius: 10px; \n    }\n```\n#### 继承\n继承是SASS中非常重要的一个特性，可以通过@extend指令在选择器之间复用CSS属性，并且不会产生冗余的代码，下面例子将会通过SASS提供的继承机制建立一系列样式：\n```css\n    // 这段代码不会被输出到最终生成的CSS文件，因为它没有被任何代码所继承。\n    %other-styles {\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    // 下面代码会正常输出到生成的CSS文件，因为它被其接下来的代码所继承。\n    %message-common {\n        border: 1px solid #ccc;\n        padding: 10px;\n        color: #333;\n    }\n\n    .message {\n        @extend %message-common;\n    }\n\n    .success {\n        @extend %message-common;\n        border-color: green;\n    }\n\n    .error {\n        @extend %message-common;\n        border-color: red;\n    }\n\n    .warning {\n        @extend %message-common;\n        border-color: yellow;\n    }\n\n```\n上面代码将.message中的CSS属性应用到了.success、.error、.warning上面，魔法将会发生在最终生成的CSS当中。这种方式能够避免在HTML元素上书写多个class选择器，最终生成的CSS样式是下面这样的：\n```css\n    .message, .success, .error, .warning {\n        border: 1px solid #ccc;\n        padding: 10px;\n        color: #333; \n    }\n\n    .success {\n        border-color: green; \n    }\n\n    .error {\n        border-color: red; \n    }\n\n    .warning {\n        border-color: yellow; \n    }\n\n```\n#### 操作符\nSASS提供了标准的算术运算符，例如+、-、*、/、%。在接下来的例子里，我们尝试在aside和article选择器当中对宽度进行简单的计算。\n```css\n    .container { width: 100%; }\n\n    article[role=\"main\"] {\n        float: left;\n        width: 600px / 960px * 100%;\n    }\n\n    aside[role=\"complementary\"] {\n        float: right;\n        width: 300px / 960px * 100%;\n    }\n\n```\n上面代码以960px为基准建立了简单的流式网格布局，SASS提供的算术运算符让开发人员可以更容易的将像素值转换为百分比，最终生成的CSS样式如下所示：\n```css\n    .container {\n        width: 100%; \n    }\n\n    article[role=\"main\"] {\n        float: left;\n        width: 62.5%; \n    }\n\n    aside[role=\"complementary\"] {\n        float: right;\n        width: 31.25%; \n    }\n```\n#### CSS扩展\nScss使用\"&\"关键字在CSS规则中引用父级选择器，例如在嵌套使用伪类选择器的场景下：\n```css\n/*===== SCSS =====*/\n    a {\n        font-weight: bold;\n        text-decoration: none;\n        &:hover { text-decoration: underline; }\n        body.firefox & { font-weight: normal; }\n    }\n\n    /*===== CSS =====*/\n    a {\n        font-weight: bold;\n        text-decoration: none; \n    }\n    a:hover {\n        text-decoration: underline;\n    }\n    body.firefox a {\n        font-weight: normal; \n    }\n```\n无论CSS规则嵌套的深度怎样，关键字\"&\"都会使用父级选择器级联替换全部其出现的位置：\n```css\n    /*===== SCSS =====*/\n    #main {\n        color: black;\n        a {\n            font-weight: bold;\n            &:hover { color: red; }\n        }\n    }\n\n/*===== CSS =====*/\n    #main {\n        color: black; \n    }\n    #main a {\n        font-weight: bold; \n    }\n    #main a:hover {\n      color: red; \n    }\n\n```\n\"&\"必须出现在复合选择器开头的位置，后面再连接自定义的后缀，例如：\n```css\n    /*===== SCSS =====*/\n    #main {\n        color: black;\n        &-sidebar { \n            border: 1px solid; \n        }\n    }\n\n    /*===== CSS =====*/\n    #main {\n        color: black; \n    }\n    #main-sidebar {\n        border: 1px solid; \n    }\n\n```\n如果在父级选择器不存在的场景使用&，Scss预处理器会报出错误信息。\n#### 嵌套属性\nCSS许多属性都位于相同的命名空间（例如font-family、font-size、font-weight都位于font命名空间下），Scss当中只需要编写命名空间一次，后续嵌套的子属性都将会位于该命名空间之下，请看下面的代码：\n```css\n    /*===== SCSS =====*/\n    .demo {\n    // 命令空间后带有冒号:\n        font: {\n            family: fantasy;\n            size: 30em;\n            weight: bold;\n        }\n    }\n\n    /*===== CSS =====*/\n    .demo {\n        font-family: fantasy;\n        font-size: 30em;\n        font-weight: bold; \n    }\n\n```\n命令空间上可以直接书写CSS简写属性，但是日常开发中建议直接书写CSS简写属性，尽量保持CSS语法的一致性。\n```css\n    .demo {\n        font: 20px/24px fantasy {\n            weight: bold;\n        }\n    }\n\n    .demo {\n        font: 20px/24px fantasy;\n            font-weight: bold;\n        }sass\n\n```\n参考文章 [简书](https://www.jianshu.com/p/a99764ff3c41)\n\n","slug":"Vue中使用scss和sass语法","published":1,"updated":"2019-01-01T06:38:41.197Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs5qls0t000enizikyiweyco","content":"<h2 id=\"Vue中使用SCSS\"><a href=\"#Vue中使用SCSS\" class=\"headerlink\" title=\"Vue中使用SCSS\"></a>Vue中使用SCSS</h2><h3 id=\"1-scss介绍\"><a href=\"#1-scss介绍\" class=\"headerlink\" title=\"1.scss介绍\"></a>1.scss介绍</h3><p>Sass是成熟、稳定、强大的CSS预处理器，而SCSS是Sass3版本当中引入的新语法特性，完全兼容CSS3的同时继承了Sass强大的动态功能   </p>\n<h3 id=\"2-特性\"><a href=\"#2-特性\" class=\"headerlink\" title=\"2.特性\"></a>2.特性</h3><p>CSS书写代码规模较大的Web应用时，容易造成选择器、层叠的复杂度过高，因此推荐通过SASS预处理器进行CSS的开发，SASS提供的变量、嵌套、混合、继承等特性，让CSS的书写更加有趣与程式化。</p>\n<h3 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"3.安装\"></a>3.安装</h3><blockquote>\n<p>npm install node-sass -S<br>npm install sass-loader -S  </p>\n</blockquote>\n<p>修改<code>build/webpack.base.conf.js</code>在<code>module.exports={...}</code>中的<code>module:{...}</code>添加     </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    context:path.resolve(__dirname,<span class=\"string\">'../'</span>)</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        app:<span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    modules:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">                loader:<span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">                options:vueLoaderConfig</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"comment\">//下面是添加的代码</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:<span class=\"regexp\">/\\.sass$/</span>,</span><br><span class=\"line\">                loader:[<span class=\"string\">'style'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'sass'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-sass-scss语法介绍\"><a href=\"#4-sass-scss语法介绍\" class=\"headerlink\" title=\"4.sass/scss语法介绍\"></a>4.sass/scss语法介绍</h3><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>变量用来存储需要在CSS中复用的信息，例如颜色和字体。SASS通过$符号去声明一个变量。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$color:#333;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:$color;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:$color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的将会转化为:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h4><p>SASS允许开发人员以嵌套的方式使用CSS，但是过度的使用嵌套会让产生的CSS难以维护，因此是一种不好的实践，下面的例子表达了一个典型的网站导航样式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$normalColor:#f7f7f7</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    ul &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">list-style</span><span class=\"selector-pseudo\">:none</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>:<span class=\"number\">100%</span></span><br><span class=\"line\">            a &#123;</span><br><span class=\"line\">                color:$normalColor</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码将转为：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#f7f7f7</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h4><p>SASS能够将代码分割为多个片段，并以underscore风格的下划线作为其命名前缀（_partial.scss），SASS会通过这些下划线来辨别哪些文件是SASS片段，并且不让片段内容直接生成为CSS文件，从而只是在使用@import指令的位置被导入。CSS原生的@import会通过额外的HTTP请求获取引入的样式片段，而SASS的@import则会直接将这些引入的片段合并至当前CSS文件，并且不会产生新的HTTP请求。下面例子中的代码，将会在base.scss文件当中引入_reset.scss片断。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// _reset.scss</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:  <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// base.scss</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'reset'</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">100%</span> Helvetica, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#efefef</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>SASS中引入片断时，可以缺省使用文件扩展名，因此上面代码中直接通过@import ‘reset’引入，编译后生成的代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">100%</span> Helvetica, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#efefef</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"混合\"><a href=\"#混合\" class=\"headerlink\" title=\"混合\"></a>混合</h4><p>混合（Mixin）用来分组那些需要在页面中复用的CSS声明，开发人员可以通过向Mixin传递变量参数来让代码更加灵活，该特性在添加浏览器兼容性前缀的时候非常有用，SASS目前使用@mixin name指令来进行混合操作。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> border-radius($radius) &#123;</span><br><span class=\"line\">            border-radius: $radius;</span><br><span class=\"line\">        -ms-border-radius: $radius;</span><br><span class=\"line\">        -moz-border-radius: $radius;</span><br><span class=\"line\">    -webkit-border-radius: $radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    @include border-radius(10px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码建立了一个名为border-radius的Mixin，并传递了一个变量$radius作为参数，然后在后续代码中通过@include border-radius(10px)使用该Mixin，最终编译的结果如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">10px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>继承是SASS中非常重要的一个特性，可以通过@extend指令在选择器之间复用CSS属性，并且不会产生冗余的代码，下面例子将会通过SASS提供的继承机制建立一系列样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这段代码不会被输出到最终生成的CSS文件，因为它没有被任何代码所继承。</span><br><span class=\"line\">%<span class=\"selector-tag\">other-styles</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 下面代码会正常输出到生成的CSS文件，因为它被其接下来的代码所继承。</span><br><span class=\"line\">%<span class=\"selector-tag\">message-common</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.message</span> &#123;</span><br><span class=\"line\">    @extend %message-common;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    @extend %message-common;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-color</span>: <span class=\"selector-tag\">green</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">    @extend %message-common;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-color</span>: <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.warning</span> &#123;</span><br><span class=\"line\">    @extend %message-common;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-color</span>: <span class=\"selector-tag\">yellow</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码将.message中的CSS属性应用到了.success、.error、.warning上面，魔法将会发生在最终生成的CSS当中。这种方式能够避免在HTML元素上书写多个class选择器，最终生成的CSS样式是下面这样的：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.message</span>, <span class=\"selector-class\">.success</span>, <span class=\"selector-class\">.error</span>, <span class=\"selector-class\">.warning</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: green; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: red; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.warning</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: yellow; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h4><p>SASS提供了标准的算术运算符，例如+、-、*、/、%。在接下来的例子里，我们尝试在aside和article选择器当中对宽度进行简单的计算。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-attr\">[role=\"main\"]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span> / <span class=\"number\">960px</span> * <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">aside</span><span class=\"selector-attr\">[role=\"complementary\"]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span> / <span class=\"number\">960px</span> * <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码以960px为基准建立了简单的流式网格布局，SASS提供的算术运算符让开发人员可以更容易的将像素值转换为百分比，最终生成的CSS样式如下所示：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-attr\">[role=\"main\"]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">62.5%</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">aside</span><span class=\"selector-attr\">[role=\"complementary\"]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">31.25%</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"CSS扩展\"><a href=\"#CSS扩展\" class=\"headerlink\" title=\"CSS扩展\"></a>CSS扩展</h4><p>Scss使用”&amp;”关键字在CSS规则中引用父级选择器，例如在嵌套使用伪类选择器的场景下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*===== SCSS =====*/</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">        &amp;:hover &#123; text-decoration: underline; &#125;</span><br><span class=\"line\">        <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> &amp; &#123; <span class=\"attribute\">font-weight</span>: normal; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*===== CSS =====*/</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: none; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-weight</span>: normal; </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>无论CSS规则嵌套的深度怎样，关键字”&amp;”都会使用父级选择器级联替换全部其出现的位置：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/*===== SCSS =====*/</span></span><br><span class=\"line\">    <span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">        a &#123;</span><br><span class=\"line\">            <span class=\"selector-tag\">font-weight</span>: <span class=\"selector-tag\">bold</span>;</span><br><span class=\"line\">            &amp;<span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*===== CSS =====*/</span></span><br><span class=\"line\">    <span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: black; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-weight</span>: bold; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: red; </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>“&amp;”必须出现在复合选择器开头的位置，后面再连接自定义的后缀，例如：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*===== SCSS =====*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    &amp;-sidebar &#123; </span><br><span class=\"line\">        <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*===== CSS =====*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#main-sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果在父级选择器不存在的场景使用&amp;，Scss预处理器会报出错误信息。</p>\n<h4 id=\"嵌套属性\"><a href=\"#嵌套属性\" class=\"headerlink\" title=\"嵌套属性\"></a>嵌套属性</h4><p>CSS许多属性都位于相同的命名空间（例如font-family、font-size、font-weight都位于font命名空间下），Scss当中只需要编写命名空间一次，后续嵌套的子属性都将会位于该命名空间之下，请看下面的代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*===== SCSS =====*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">// 命令空间后带有冒号:</span><br><span class=\"line\">    <span class=\"selector-tag\">font</span>: &#123;</span><br><span class=\"line\">        <span class=\"attribute\">family</span>: fantasy;</span><br><span class=\"line\">        <span class=\"attribute\">size</span>: <span class=\"number\">30em</span>;</span><br><span class=\"line\">        <span class=\"attribute\">weight</span>: bold;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*===== CSS =====*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: fantasy;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">30em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>命令空间上可以直接书写CSS简写属性，但是日常开发中建议直接书写CSS简写属性，尽量保持CSS语法的一致性。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">20px</span>/<span class=\"number\">24px</span> fantasy &#123;</span><br><span class=\"line\">        weight: bold;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">20px</span>/<span class=\"number\">24px</span> fantasy;</span><br><span class=\"line\">        <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    &#125;<span class=\"selector-tag\">sass</span></span><br></pre></td></tr></table></figure></p>\n<p>参考文章 <a href=\"https://www.jianshu.com/p/a99764ff3c41\" target=\"_blank\" rel=\"noopener\">简书</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Vue中使用SCSS\"><a href=\"#Vue中使用SCSS\" class=\"headerlink\" title=\"Vue中使用SCSS\"></a>Vue中使用SCSS</h2><h3 id=\"1-scss介绍\"><a href=\"#1-scss介绍\" class=\"headerlink\" title=\"1.scss介绍\"></a>1.scss介绍</h3><p>Sass是成熟、稳定、强大的CSS预处理器，而SCSS是Sass3版本当中引入的新语法特性，完全兼容CSS3的同时继承了Sass强大的动态功能   </p>\n<h3 id=\"2-特性\"><a href=\"#2-特性\" class=\"headerlink\" title=\"2.特性\"></a>2.特性</h3><p>CSS书写代码规模较大的Web应用时，容易造成选择器、层叠的复杂度过高，因此推荐通过SASS预处理器进行CSS的开发，SASS提供的变量、嵌套、混合、继承等特性，让CSS的书写更加有趣与程式化。</p>\n<h3 id=\"3-安装\"><a href=\"#3-安装\" class=\"headerlink\" title=\"3.安装\"></a>3.安装</h3><blockquote>\n<p>npm install node-sass -S<br>npm install sass-loader -S  </p>\n</blockquote>\n<p>修改<code>build/webpack.base.conf.js</code>在<code>module.exports={...}</code>中的<code>module:{...}</code>添加     </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    context:path.resolve(__dirname,<span class=\"string\">'../'</span>)</span><br><span class=\"line\">    entry:&#123;</span><br><span class=\"line\">        app:<span class=\"string\">'./src/main.js'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    modules:&#123;</span><br><span class=\"line\">        rules:[</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:<span class=\"regexp\">/\\.vue$/</span>,</span><br><span class=\"line\">                loader:<span class=\"string\">'vue-loader'</span>,</span><br><span class=\"line\">                options:vueLoaderConfig</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            ...</span><br><span class=\"line\">            <span class=\"comment\">//下面是添加的代码</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                test:<span class=\"regexp\">/\\.sass$/</span>,</span><br><span class=\"line\">                loader:[<span class=\"string\">'style'</span>,<span class=\"string\">'css'</span>,<span class=\"string\">'sass'</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-sass-scss语法介绍\"><a href=\"#4-sass-scss语法介绍\" class=\"headerlink\" title=\"4.sass/scss语法介绍\"></a>4.sass/scss语法介绍</h3><h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>变量用来存储需要在CSS中复用的信息，例如颜色和字体。SASS通过$符号去声明一个变量。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$color:#333;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:$color;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:$color;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的将会转化为:<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background</span>:<span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h4><p>SASS允许开发人员以嵌套的方式使用CSS，但是过度的使用嵌套会让产生的CSS难以维护，因此是一种不好的实践，下面的例子表达了一个典型的网站导航样式<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$normalColor:#f7f7f7</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">    ul &#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">list-style</span><span class=\"selector-pseudo\">:none</span>;</span><br><span class=\"line\">        <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">            <span class=\"attribute\">width</span>:<span class=\"number\">100%</span></span><br><span class=\"line\">            a &#123;</span><br><span class=\"line\">                color:$normalColor</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码将转为：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">nav</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">list-style</span>:none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">nav</span> <span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>:<span class=\"number\">#f7f7f7</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h4><p>SASS能够将代码分割为多个片段，并以underscore风格的下划线作为其命名前缀（_partial.scss），SASS会通过这些下划线来辨别哪些文件是SASS片段，并且不让片段内容直接生成为CSS文件，从而只是在使用@import指令的位置被导入。CSS原生的@import会通过额外的HTTP请求获取引入的样式片段，而SASS的@import则会直接将这些引入的片段合并至当前CSS文件，并且不会产生新的HTTP请求。下面例子中的代码，将会在base.scss文件当中引入_reset.scss片断。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// _reset.scss</span><br><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>:  <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// base.scss</span><br><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'reset'</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">100%</span> Helvetica, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#efefef</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>SASS中引入片断时，可以缺省使用文件扩展名，因此上面代码中直接通过@import ‘reset’引入，编译后生成的代码如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span>, <span class=\"selector-tag\">body</span>, <span class=\"selector-tag\">ul</span>, <span class=\"selector-tag\">ol</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">100%</span> Helvetica, sans-serif;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#efefef</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"混合\"><a href=\"#混合\" class=\"headerlink\" title=\"混合\"></a>混合</h4><p>混合（Mixin）用来分组那些需要在页面中复用的CSS声明，开发人员可以通过向Mixin传递变量参数来让代码更加灵活，该特性在添加浏览器兼容性前缀的时候非常有用，SASS目前使用@mixin name指令来进行混合操作。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">mixin</span> border-radius($radius) &#123;</span><br><span class=\"line\">            border-radius: $radius;</span><br><span class=\"line\">        -ms-border-radius: $radius;</span><br><span class=\"line\">        -moz-border-radius: $radius;</span><br><span class=\"line\">    -webkit-border-radius: $radius;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    @include border-radius(10px);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面的代码建立了一个名为border-radius的Mixin，并传递了一个变量$radius作为参数，然后在后续代码中通过@include border-radius(10px)使用该Mixin，最终编译的结果如下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-ms-border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-moz-border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">10px</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h4><p>继承是SASS中非常重要的一个特性，可以通过@extend指令在选择器之间复用CSS属性，并且不会产生冗余的代码，下面例子将会通过SASS提供的继承机制建立一系列样式：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 这段代码不会被输出到最终生成的CSS文件，因为它没有被任何代码所继承。</span><br><span class=\"line\">%<span class=\"selector-tag\">other-styles</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">    <span class=\"attribute\">flex-wrap</span>: wrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 下面代码会正常输出到生成的CSS文件，因为它被其接下来的代码所继承。</span><br><span class=\"line\">%<span class=\"selector-tag\">message-common</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.message</span> &#123;</span><br><span class=\"line\">    @extend %message-common;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    @extend %message-common;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-color</span>: <span class=\"selector-tag\">green</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">    @extend %message-common;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-color</span>: <span class=\"selector-tag\">red</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.warning</span> &#123;</span><br><span class=\"line\">    @extend %message-common;</span><br><span class=\"line\">    <span class=\"selector-tag\">border-color</span>: <span class=\"selector-tag\">yellow</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码将.message中的CSS属性应用到了.success、.error、.warning上面，魔法将会发生在最终生成的CSS当中。这种方式能够避免在HTML元素上书写多个class选择器，最终生成的CSS样式是下面这样的：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.message</span>, <span class=\"selector-class\">.success</span>, <span class=\"selector-class\">.error</span>, <span class=\"selector-class\">.warning</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"number\">#333</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.success</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: green; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.error</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: red; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.warning</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border-color</span>: yellow; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h4><p>SASS提供了标准的算术运算符，例如+、-、*、/、%。在接下来的例子里，我们尝试在aside和article选择器当中对宽度进行简单的计算。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123; <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-attr\">[role=\"main\"]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">600px</span> / <span class=\"number\">960px</span> * <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">aside</span><span class=\"selector-attr\">[role=\"complementary\"]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">300px</span> / <span class=\"number\">960px</span> * <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面代码以960px为基准建立了简单的流式网格布局，SASS提供的算术运算符让开发人员可以更容易的将像素值转换为百分比，最终生成的CSS样式如下所示：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">article</span><span class=\"selector-attr\">[role=\"main\"]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">62.5%</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">aside</span><span class=\"selector-attr\">[role=\"complementary\"]</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">31.25%</span>; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"CSS扩展\"><a href=\"#CSS扩展\" class=\"headerlink\" title=\"CSS扩展\"></a>CSS扩展</h4><p>Scss使用”&amp;”关键字在CSS规则中引用父级选择器，例如在嵌套使用伪类选择器的场景下：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*===== SCSS =====*/</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: none;</span><br><span class=\"line\">        &amp;:hover &#123; text-decoration: underline; &#125;</span><br><span class=\"line\">        <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> &amp; &#123; <span class=\"attribute\">font-weight</span>: normal; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*===== CSS =====*/</span></span><br><span class=\"line\">    <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: none; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">text-decoration</span>: underline;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">body</span><span class=\"selector-class\">.firefox</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-weight</span>: normal; </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>无论CSS规则嵌套的深度怎样，关键字”&amp;”都会使用父级选择器级联替换全部其出现的位置：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"comment\">/*===== SCSS =====*/</span></span><br><span class=\"line\">    <span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">        a &#123;</span><br><span class=\"line\">            <span class=\"selector-tag\">font-weight</span>: <span class=\"selector-tag\">bold</span>;</span><br><span class=\"line\">            &amp;<span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">color</span>: red; &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*===== CSS =====*/</span></span><br><span class=\"line\">    <span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">color</span>: black; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">a</span> &#123;</span><br><span class=\"line\">        <span class=\"attribute\">font-weight</span>: bold; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-id\">#main</span> <span class=\"selector-tag\">a</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">color</span>: red; </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>“&amp;”必须出现在复合选择器开头的位置，后面再连接自定义的后缀，例如：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*===== SCSS =====*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black;</span><br><span class=\"line\">    &amp;-sidebar &#123; </span><br><span class=\"line\">        <span class=\"selector-tag\">border</span>: 1<span class=\"selector-tag\">px</span> <span class=\"selector-tag\">solid</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*===== CSS =====*/</span></span><br><span class=\"line\"><span class=\"selector-id\">#main</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: black; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-id\">#main-sidebar</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">border</span>: <span class=\"number\">1px</span> solid; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>如果在父级选择器不存在的场景使用&amp;，Scss预处理器会报出错误信息。</p>\n<h4 id=\"嵌套属性\"><a href=\"#嵌套属性\" class=\"headerlink\" title=\"嵌套属性\"></a>嵌套属性</h4><p>CSS许多属性都位于相同的命名空间（例如font-family、font-size、font-weight都位于font命名空间下），Scss当中只需要编写命名空间一次，后续嵌套的子属性都将会位于该命名空间之下，请看下面的代码：<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*===== SCSS =====*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">// 命令空间后带有冒号:</span><br><span class=\"line\">    <span class=\"selector-tag\">font</span>: &#123;</span><br><span class=\"line\">        <span class=\"attribute\">family</span>: fantasy;</span><br><span class=\"line\">        <span class=\"attribute\">size</span>: <span class=\"number\">30em</span>;</span><br><span class=\"line\">        <span class=\"attribute\">weight</span>: bold;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*===== CSS =====*/</span></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font-family</span>: fantasy;</span><br><span class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">30em</span>;</span><br><span class=\"line\">    <span class=\"attribute\">font-weight</span>: bold; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>命令空间上可以直接书写CSS简写属性，但是日常开发中建议直接书写CSS简写属性，尽量保持CSS语法的一致性。<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">20px</span>/<span class=\"number\">24px</span> fantasy &#123;</span><br><span class=\"line\">        weight: bold;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.demo</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">font</span>: <span class=\"number\">20px</span>/<span class=\"number\">24px</span> fantasy;</span><br><span class=\"line\">        <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">    &#125;<span class=\"selector-tag\">sass</span></span><br></pre></td></tr></table></figure></p>\n<p>参考文章 <a href=\"https://www.jianshu.com/p/a99764ff3c41\" target=\"_blank\" rel=\"noopener\">简书</a></p>\n"},{"title":"vscode格式化vue文件","date":"2018-10-06T08:06:04.000Z","_content":"\n##  使用VScode格式化.vue文件\n首先在应用商店搜索“Vetur”插件安装，然后进行下面的操作：\n>{  \n    \"prettier.tabWidth\":4,  \n    \"Vetur.format.defaultFormatter.html\":\"prettiers\"  \n}","source":"_posts/vscode格式化vue文件.md","raw":"---\ntitle: vscode格式化vue文件\ndate: 2018-10-06 16:06:04\ntags:\n    -Vue\ncategories:\n---\n\n##  使用VScode格式化.vue文件\n首先在应用商店搜索“Vetur”插件安装，然后进行下面的操作：\n>{  \n    \"prettier.tabWidth\":4,  \n    \"Vetur.format.defaultFormatter.html\":\"prettiers\"  \n}","slug":"vscode格式化vue文件","published":1,"updated":"2018-11-03T08:09:18.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjs5qls0x000gniziip0pylm5","content":"<h2 id=\"使用VScode格式化-vue文件\"><a href=\"#使用VScode格式化-vue文件\" class=\"headerlink\" title=\"使用VScode格式化.vue文件\"></a>使用VScode格式化.vue文件</h2><p>首先在应用商店搜索“Vetur”插件安装，然后进行下面的操作：</p>\n<blockquote>\n<p>{<br>    “prettier.tabWidth”:4,<br>    “Vetur.format.defaultFormatter.html”:”prettiers”<br>}</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"使用VScode格式化-vue文件\"><a href=\"#使用VScode格式化-vue文件\" class=\"headerlink\" title=\"使用VScode格式化.vue文件\"></a>使用VScode格式化.vue文件</h2><p>首先在应用商店搜索“Vetur”插件安装，然后进行下面的操作：</p>\n<blockquote>\n<p>{<br>    “prettier.tabWidth”:4,<br>    “Vetur.format.defaultFormatter.html”:”prettiers”<br>}</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjs5qls0i0004nizixjaedh7o","tag_id":"cjs5qls0l0006nizixaupjeo2","_id":"cjs5qls0s000bniziv10c6k32"},{"post_id":"cjs5qls0q0009nizip60tlxpo","tag_id":"cjs5qls0l0006nizixaupjeo2","_id":"cjs5qls0t000dnizi2iez3frt"},{"post_id":"cjs5qls0k0005nizi5a5xi6pg","tag_id":"cjs5qls0r000anizi3p8fpxma","_id":"cjs5qls0x000hnizi2mgaombr"},{"post_id":"cjs5qls0t000enizikyiweyco","tag_id":"cjs5qls0l0006nizixaupjeo2","_id":"cjs5qls0y000inizi3eo72mi2"},{"post_id":"cjs5qls0x000gniziip0pylm5","tag_id":"cjs5qls0l0006nizixaupjeo2","_id":"cjs5qls0y000knizicep82o7a"},{"post_id":"cjs5qls0n0007nizi4326fzft","tag_id":"cjs5qls0l0006nizixaupjeo2","_id":"cjs5qls0y000lnizivek4x10i"},{"post_id":"cjs5qls0p0008nizi4ry732l6","tag_id":"cjs5qls0y000jnizid7agp9s1","_id":"cjs5qls0z000mnizivouir6cz"}],"Tag":[{"name":"-Vue","_id":"cjs5qls0l0006nizixaupjeo2"},{"name":"-ES6","_id":"cjs5qls0r000anizi3p8fpxma"},{"name":"-Vue -vscode","_id":"cjs5qls0y000jnizid7agp9s1"}]}}